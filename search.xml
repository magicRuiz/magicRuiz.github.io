<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The Iron Man Cast</title>
    <url>/2020/11/28/the-Iron-Man-cast/</url>
    <content><![CDATA[<h3 id="About-this-analysis"><a href="#About-this-analysis" class="headerlink" title="About this analysis"></a>About this analysis</h3><p>This time I did a series of analysis about the movies and the relative information about the movies. For the data, I used a .json document full of the movies’ data and there are a lot of movies’ casts, producer’s names in it, I can search most movies with a proper way.</p>
<p>Before doing that, I would like to introduce the things what we need to import:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> pyvis.network <span class="keyword">import</span> Network</span><br></pre></td></tr></table></figure>

<p>and we put the data in a list and get some basic information about the work:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Movies = []</span><br><span class="line"><span class="keyword">with</span> open (<span class="string">"./data.json"</span>, <span class="string">"r"</span>, encoding =<span class="string">"utf -8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        J = json.loads(line)</span><br><span class="line">        Movies.append(J)</span><br><span class="line">len(Movies)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">114827</span><br></pre></td></tr></table></figure>

<p>very large and impressive isn’t it?</p>
<p><a href="https://imgchr.com/i/D6u1QU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/28/D6u1QU.png" alt="D6u1QU.png"></a></p>
<p>then the work begins</p>
<hr>
<h3 id="The-program-part"><a href="#The-program-part" class="headerlink" title="The program part"></a>The program part</h3><h4 id="The-proper-way-to-search-for-something-I-want"><a href="#The-proper-way-to-search-for-something-I-want" class="headerlink" title="The proper way to search for something I want"></a>The proper way to search for something I want</h4><p>It is very simple to make a program which have the function of the searching( just uses the loops)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_films</span><span class="params">(key, value)</span>:</span></span><br><span class="line">    films = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,<span class="number">114827</span>):</span><br><span class="line">        <span class="keyword">if</span> key  <span class="keyword">in</span> Movies[i].keys():</span><br><span class="line">            <span class="keyword">if</span> type(Movies[i][key])==str:</span><br><span class="line">                <span class="keyword">if</span> value==Movies[i][key]:</span><br><span class="line">                    films.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> u <span class="keyword">in</span> Movies[i][key]:</span><br><span class="line">                    <span class="keyword">if</span> u==value:</span><br><span class="line">                        films.append(i)</span><br><span class="line">    <span class="keyword">return</span> films</span><br></pre></td></tr></table></figure>

<p>however, we need to take care of the different information or different types of them in order to avoid the situation which is what we are searching is not exist in some lines and the loops will be shut down</p>
<h4 id="The-Graph"><a href="#The-Graph" class="headerlink" title="The Graph"></a>The Graph</h4><p>A graph G=(V,E) is made up with Vertex and Edge, it can describe the relationship with many things like the cast in the Iron Man, we can use the Graph to make the actors connected</p>
<h4 id="The-choices-of-the-movies"><a href="#The-choices-of-the-movies" class="headerlink" title="The choices of the movies"></a>The choices of the movies</h4><p>Using the program that I wrote to choose the movies that I want</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filmschosen=[]</span><br><span class="line">filmschosenreal=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">114827</span>):</span><br><span class="line">    <span class="keyword">if</span>  <span class="string">'companies'</span>  <span class="keyword">in</span> Movies[i].keys():</span><br><span class="line">        <span class="keyword">if</span>  <span class="string">'Iron Man'</span> <span class="keyword">in</span> Movies[i][<span class="string">'title'</span>] :</span><br><span class="line">            filmschosen.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filmschosen:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> Movies[i][<span class="string">'companies'</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Marvel'</span> <span class="keyword">in</span> j:</span><br><span class="line">            filmschosenreal.append(i)</span><br><span class="line">filmschosen = filmschosenreal</span><br><span class="line">print(filmschosen)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[13967, 39592, 39593]</span><br></pre></td></tr></table></figure>

<p>Those are the number of the movies I have chosen(3 of them)</p>
<h4 id="Making-a-graph"><a href="#Making-a-graph" class="headerlink" title="Making a graph"></a>Making a graph</h4><p>create an empty graph</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = nx.Graph()</span><br><span class="line">nx.draw_networkx(G)</span><br></pre></td></tr></table></figure>

<p>the color</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colorconnect = [<span class="string">'#0000FF'</span>,<span class="string">'#228B22'</span>,<span class="string">'#FF4500'</span>]</span><br><span class="line">c=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p> We need to use c to switch the color</p>
<p>Then the loops of drawing the graph</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filmschosen:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> Movies[i][<span class="string">'cast'</span>]:</span><br><span class="line">        G.add_node(n, title=n)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range (len(Movies[i][<span class="string">'cast'</span>])):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range (m+<span class="number">1</span>,len(Movies[i][<span class="string">'cast'</span>])):</span><br><span class="line">            G.add_edge(Movies[i][<span class="string">'cast'</span>][m],Movies[i][<span class="string">'cast'</span>][k] , title= Movies[i][<span class="string">'title'</span>],color=colorconnect[c])</span><br><span class="line">    c = c+<span class="number">1</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line">nx.draw_shell(G, with_labels=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><em>Here comes the graph (don’t worry about the color, it won’t appear here)</em></p>
<p><a href="https://imgchr.com/i/D6YUDP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/28/D6YUDP.png" alt="D6YUDP.png"></a></p>
<h4 id="The-core-of-the-casts-in-the-Iron-Man-series"><a href="#The-core-of-the-casts-in-the-Iron-Man-series" class="headerlink" title="The core of the casts in the Iron Man series"></a>The core of the casts in the Iron Man series</h4><p>just use the degree_centrality function</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nx.degree_centrality(G)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;Robert Downey Jr.&#39;: 1.0,</span><br><span class="line"> &#39;Terrence Howard&#39;: 0.26666666666666666,</span><br><span class="line"> &#39;Jeff Bridges&#39;: 0.26666666666666666,</span><br><span class="line"> &#39;Shaun Toub&#39;: 0.26666666666666666,</span><br><span class="line"> &#39;Gwyneth Paltrow&#39;: 1.0,</span><br><span class="line"> &#39;Don Cheadle&#39;: 0.8,</span><br><span class="line"> &#39;Scarlett Johansson&#39;: 0.4,</span><br><span class="line"> &#39;Sam Rockwell&#39;: 0.4,</span><br><span class="line"> &#39;Mickey Rourke&#39;: 0.4,</span><br><span class="line"> &#39;Samuel L. Jackson&#39;: 0.4,</span><br><span class="line"> &#39;Guy Pearce&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Rebecca Hall&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Stéphanie Szostak&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;James Badge Dale&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Jon Favreau&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Ben Kingsley&#39;: 0.5333333333333333&#125;</span><br></pre></td></tr></table></figure>

<p>Robert Downey Jr. and Gwyneth Paltrow are the cores: they acted in every in the series!</p>
<h4 id="Use-the-pyvis-to-draw-the-relationship-further"><a href="#Use-the-pyvis-to-draw-the-relationship-further" class="headerlink" title="Use the pyvis to draw the relationship further"></a>Use the pyvis to draw the relationship further</h4><p>Pyvis can draw interactive graph with the graph that we have created</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">displayG = Network(width=<span class="number">1024</span>, height=<span class="number">768</span>, notebook = <span class="literal">True</span>,heading=<span class="string">'Iron Man'</span>) </span><br><span class="line">displayG.from_nx(G) </span><br><span class="line">displayG.show(<span class="string">'test.html'</span>)</span><br></pre></td></tr></table></figure>

<p>here is the result!</p>
<p><a href="https://imgchr.com/i/D6dPfS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/28/D6dPfS.png" alt="D6dPfS.png"></a></p>
<hr>
<h3 id="Finally…"><a href="#Finally…" class="headerlink" title="Finally…"></a>Finally…</h3><p>I made an interactive graph with python at last. However, the content is only about the Iron Man, we can actually use the program to make more graphs about other films. To make it more usable, I will try to do more about the movies in my next post.</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentiment Analysis</title>
    <url>/2020/09/27/Sentiment-Analysis/</url>
    <content><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background:"></a>Background:</h3><p> With the emergence of Internet companies such as Google, Facebook, and Twitter, more and more data accessible online is comprised of text. Textual data and the computational means of processing it and extracting information is also increasingly more important in areas such as business, humanities, social sciences, etc. In this assignment, you will deal with textual analysis.<br>Twitter has become very popular, with many people “tweeting” aspects of their daily lives. This “flow of tweets” has recently become a way to study or guess how people feel about various aspects of the world or their own life. For example, analysis of tweets has been used to try to determine how certain geographical regions may be voting – this is done by analyzing the content, the words, and phrases, in tweets. Similarly, analysis of keywords or phrases in tweets can be used to determine how popular or unpopular a movie might be. This is often referred to as sentiment analysis.</p>
<h3 id="The-program-goes-like-this"><a href="#The-program-goes-like-this" class="headerlink" title="The program goes like this:"></a>The program goes like this:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#read the document</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"keywords"</span>,<span class="string">'r'</span>,encoding=<span class="string">"utf-8"</span>)<span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">keywords = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    keyword,value = line.replace(<span class="string">'\n'</span>,<span class="string">''</span>).split(<span class="string">','</span>)</span><br><span class="line">    keywords[keyword]=int(value)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"tweets"</span>,<span class="string">'r'</span>,encoding=<span class="string">"utf-8"</span>)<span class="keyword">as</span> tws:</span><br><span class="line">    content = tws.readlines()</span><br><span class="line">tweets=content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit the contents</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(tweets)):</span><br><span class="line">    tryb = tweets[i]</span><br><span class="line">    tryb=tryb.replace(<span class="string">'['</span>,<span class="string">''</span>)</span><br><span class="line">    tryb=tryb.replace(<span class="string">']'</span>,<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    listb=tryb.split(<span class="string">' '</span>)</span><br><span class="line">    listb[<span class="number">1</span>]=float(listb[<span class="number">1</span>])</span><br><span class="line">    tweets[i]= listb</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">0</span>,len(tweets)):</span><br><span class="line">    ind = tweets[q]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,len(ind)):</span><br><span class="line">    <span class="keyword">while</span> ind[i]!=<span class="string">''</span> <span class="keyword">and</span> (ind[i][<span class="number">0</span>].isalpha()!=<span class="literal">True</span> <span class="keyword">or</span> ind[i][<span class="number">-1</span>].isalpha()!=<span class="literal">True</span>) :</span><br><span class="line">            <span class="keyword">if</span> ind[i][<span class="number">0</span>].isalpha()!=<span class="literal">True</span>:</span><br><span class="line">                ind[i]=ind[i].strip(ind[i][<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ind[i][<span class="number">-1</span>].isalpha()!=<span class="literal">True</span>:</span><br><span class="line">                ind[i] =ind[i].strip(ind[i][<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> tweets:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,len(ind)):</span><br><span class="line">        ind[i]=ind[i].lower()</span><br><span class="line">finalplaceandvalue=&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#caculate value</span></span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">0</span>,len(tweets)):</span><br><span class="line">    ind = tweets[q]</span><br><span class="line">    num =<span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,len(ind)):</span><br><span class="line">        <span class="keyword">for</span> keywd,keyvalue <span class="keyword">in</span> keywords.items():</span><br><span class="line">            <span class="keyword">if</span> ind[i].find(keywd)!=<span class="number">-1</span>:</span><br><span class="line">                num = num+keyvalue</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ind[<span class="number">1</span>]<span class="keyword">in</span> finalplaceandvalue.keys():</span><br><span class="line">        finalplaceandvalue[ind[<span class="number">1</span>]]=finalplaceandvalue[ind[<span class="number">1</span>]]+num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        finalplaceandvalue.update(&#123;ind[<span class="number">1</span>]:num&#125;)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">#classification and caculation    </span></span><br><span class="line">valid=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line">number=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line">sumofall=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> finalplaceandvalue.items():</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-125.242264</span> <span class="keyword">and</span> k&lt;<span class="number">-115.236428</span>:</span><br><span class="line">        number[<span class="string">'Pacific'</span>] = number[<span class="string">'Pacific'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Pacific'</span>] = valid[<span class="string">'Pacific'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Pacific'</span>]= sumofall[<span class="string">'Pacific'</span>]+v</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-115.236428</span> <span class="keyword">and</span> k&lt;<span class="number">-101.998892</span>:</span><br><span class="line">        number[<span class="string">'Mountain'</span>] = number[<span class="string">'Mountain'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Mountain'</span>] = valid[<span class="string">'Mountain'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Mountain'</span>]= sumofall[<span class="string">'Mountain'</span>]+v</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-101.998892</span> <span class="keyword">and</span> k&lt;<span class="number">-87.518395</span>:</span><br><span class="line">        number[<span class="string">'Central'</span>] = number[<span class="string">'Central'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Central'</span>] = valid[<span class="string">'Central'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Central'</span>]= sumofall[<span class="string">'Central'</span>]+v</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-87.518395</span> <span class="keyword">and</span> k&lt;<span class="number">-67.44574</span>:</span><br><span class="line">        number[<span class="string">'Eastern'</span>] = number[<span class="string">'Eastern'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Eastern'</span>] = valid[<span class="string">'Eastern'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Eastern'</span>]= sumofall[<span class="string">'Eastern'</span>]+v</span><br><span class="line">average=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> sumofall.items():</span><br><span class="line">    average[k]=v/number[k]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#tuples output</span></span><br><span class="line">Eastern = (average[<span class="string">'Eastern'</span>],valid[<span class="string">'Eastern'</span>],number[<span class="string">'Eastern'</span>])</span><br><span class="line">Central=(average[<span class="string">'Central'</span>],valid[<span class="string">'Central'</span>],number[<span class="string">'Central'</span>])</span><br><span class="line">Mountain=(average[<span class="string">'Mountain'</span>],valid[<span class="string">'Mountain'</span>],number[<span class="string">'Mountain'</span>])</span><br><span class="line">Pacific=(average[<span class="string">'Pacific'</span>],valid[<span class="string">'Pacific'</span>],number[<span class="string">'Pacific'</span>])</span><br><span class="line">print( Eastern)</span><br><span class="line">print(Central)</span><br><span class="line">print(Mountain)</span><br><span class="line">print(Pacific)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(4.667894413750767, 806, 1629)</span><br><span class="line">(4.800813008130081, 380, 738)</span><br><span class="line">(8.669491525423728, 68, 118)</span><br><span class="line">(5.376021798365122, 197, 367)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>the monkeys and their king</title>
    <url>/2020/08/06/c-the-monkeys-and-their-king/</url>
    <content><![CDATA[<p>The story is like this, a group of monkey decide to select a king from them, they had a rule for the selection:</p>
<p> <em>let the monkeys sit in a circle and give them a number which is from 1 to 3 separately, if a monkey gets a number 3, the monkey must quit and the rest of the monkeys continue having the game till there is only one monkey left, the monkey left is the king of the monkeys.</em></p>
<p>I need to write a program which can give a prediction according to the number of monkeys in the game which is entered.  </p>
<hr>
<p>The rules is simple but not so easy, the circle problem is the difficulty.</p>
<p>To make number in a circle, I need to have a automatic system which can make the next number of the largest number be the first number, just like this:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i = i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>( i==num)</span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">0</span>;	</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>I need to change the number given to the monkeys every time according to the order, also, the number should be like this: ‘1,2,3,1,2,3’ (however I made the 3 to be 0).</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add = add+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(add ==<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				add = <span class="number">0</span>;</span><br><span class="line">				remain = remain<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<p>After that it is no a big deal.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> add=<span class="number">0</span>,i=<span class="number">-1</span>,num=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">	<span class="keyword">int</span> mark[num];</span><br><span class="line">	<span class="keyword">int</span> remain = num;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mark[i]=<span class="number">123</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	i = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(remain&gt;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		i = i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>( i==num)</span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">0</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mark[i]!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			add = add+<span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(add ==<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				add = <span class="number">0</span>;</span><br><span class="line">				remain = remain<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mark[i]=add;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (mark[i]!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>,(i+<span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/08/06/a2bDKJ.png" alt="a2bDKJ.png"></p>
<p>Done!</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>the diamond creating</title>
    <url>/2020/08/02/c-the-diamond/</url>
    <content><![CDATA[<p>These days I am learning the C programming language, which is the brand new topic for me. The C programming language is the further exploration.</p>
<p>The first thing that I want to tell is about some interesting tasks, but I will start with one that I did before with python, which is the diamond generating.</p>
<hr>
<p>This is the thing that I did with python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=int(input())</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">2</span>,int((x+<span class="number">1</span>)/<span class="number">2</span>)+<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (int((x<span class="number">-1</span>)/<span class="number">2</span>),<span class="number">1</span>,<span class="number">-1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">     *     </span><br><span class="line">    * *    </span><br><span class="line">   *   *   </span><br><span class="line">  *     *  </span><br><span class="line"> *       * </span><br><span class="line">*         *</span><br><span class="line"> *       * </span><br><span class="line">  *     *  </span><br><span class="line">   *   *   </span><br><span class="line">    * *    </span><br><span class="line">     *</span><br></pre></td></tr></table></figure>

<hr>
<p>So now I need to do the same thing with C.</p>
<p>(by the way I am using the DEV cpp)</p>
<p>This is the diamond  program without the hollow:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,nb,m,i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"please give me the size of the diamond"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n/<span class="number">2</span>+<span class="number">1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(m = <span class="number">0</span> ;m&lt;=(n/<span class="number">2</span>+<span class="number">1</span>-i);m++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(nb = <span class="number">1</span>;nb&lt;=i*<span class="number">2</span>+<span class="number">1</span>;nb++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i =n/<span class="number">2</span><span class="number">-1</span> ;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(m = <span class="number">0</span> ;m&lt;=(n/<span class="number">2</span>+<span class="number">1</span>-i);m++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(nb = <span class="number">1</span>;nb&lt;=i*<span class="number">2</span>+<span class="number">1</span>;nb++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This diamond program created a diamond with more ‘  ‘, just like this:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aJtGnS.png" alt="aJtGnS.png"></p>
<p>But I think that is ok because the overall method is the same.</p>
<hr>
<p>When it comes to the hollow one, things are more difficult.</p>
<p>I need to give the hollow part by removing the ‘*’ in the middle part.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,nb,m,i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"please give me the size of the diamond "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(m = <span class="number">0</span>;m&lt;n/<span class="number">2</span>;m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (m = <span class="number">2</span>;m&lt;=n/<span class="number">2</span>+<span class="number">1</span>;m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = n/<span class="number">2</span>+<span class="number">1</span>-m;i&gt;=<span class="number">1</span>;i-- )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">		<span class="keyword">for</span>(i = (m<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (m =n/<span class="number">2</span> ;m&gt;=<span class="number">2</span>;m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = n/<span class="number">2</span>+<span class="number">1</span>-m;i&gt;=<span class="number">1</span>;i-- )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">		<span class="keyword">for</span>(i = (m<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(m = <span class="number">0</span>;m&lt;n/<span class="number">2</span>;m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Because the first and the last line of the diamond is special: only one ‘*’ is printed.</p>
<p>This is the result:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aJDITf.png" alt="aJDITf.png"></p>
<p>Just like the python.</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Giving the Fibonacci Sequence and the callnum() creation</title>
    <url>/2020/07/13/Python6/</url>
    <content><![CDATA[<p>I got a question that asked me to give the last number and the sum of all the numbers in the Fibonacci Sequence(the length of it is asked to be entered by the user).</p>
<hr>
<p>Here is the answer I have:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = input()</span><br><span class="line">fb = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> len(fb)!=int(n):</span><br><span class="line">    </span><br><span class="line">    fb.append(fb[<span class="number">-1</span>]+fb [<span class="number">-2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(fb)):</span><br><span class="line">    total = total + fb[i<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(fb)   </span><br><span class="line">print(<span class="string">'This is the '</span>+str(n)+callnum(n)+<span class="string">' number: '</span>,fb[<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'This is the sum of the sequence till the '</span>+str(n)+callnum(n)+<span class="string">' number: '</span>,total)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">[1, 1, 2, 3, 5, 8, 13, 21]</span><br><span class="line">This is the 8th number:  21</span><br><span class="line">This is the sum of the sequence till the 8th number:  54</span><br></pre></td></tr></table></figure>

<hr>
<p>It is worth mentioning that there is a function called ‘callnum()’ , it is the new function I created to give the ordinal number, it is very  simple:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callnum</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> str(i)[<span class="number">-1</span>]==<span class="string">'1'</span>:</span><br><span class="line">        call = <span class="string">'st'</span></span><br><span class="line">    <span class="keyword">elif</span> str(i)[<span class="number">-1</span>]==<span class="string">'2'</span>:</span><br><span class="line">        call = <span class="string">'nd'</span></span><br><span class="line">    <span class="keyword">elif</span> str(i)[<span class="number">-1</span>]==<span class="string">'3'</span>:</span><br><span class="line">        call=<span class="string">'rd'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        call= <span class="string">'th'</span></span><br><span class="line">    <span class="keyword">return</span> call</span><br></pre></td></tr></table></figure>

<p>Actually it is from one question that I was given, after giving the answer, I decided to have a easier way to use this function, so I defined it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set2= &#123;<span class="string">'1'</span>: <span class="number">31</span>,<span class="string">'2'</span>:<span class="number">29</span>,<span class="string">'3'</span>:<span class="number">31</span>,<span class="string">'4'</span>:<span class="number">30</span>,<span class="string">'5'</span>:<span class="number">31</span>,<span class="string">'6'</span>:<span class="number">30</span>,<span class="string">'7'</span>:<span class="number">31</span>,<span class="string">'8'</span>:<span class="number">31</span>,<span class="string">'9'</span>:<span class="number">30</span>,<span class="string">'10'</span>:<span class="number">31</span>,<span class="string">'11'</span>:<span class="number">30</span>,<span class="string">'12'</span>:<span class="number">31</span>&#125;</span><br><span class="line">set1=&#123;<span class="string">'1'</span>: <span class="number">31</span>,<span class="string">'2'</span>:<span class="number">28</span>,<span class="string">'3'</span>:<span class="number">31</span>,<span class="string">'4'</span>:<span class="number">30</span>,<span class="string">'5'</span>:<span class="number">31</span>,<span class="string">'6'</span>:<span class="number">30</span>,<span class="string">'7'</span>:<span class="number">31</span>,<span class="string">'8'</span>:<span class="number">31</span>,<span class="string">'9'</span>:<span class="number">30</span>,<span class="string">'10'</span>:<span class="number">31</span>,<span class="string">'11'</span>:<span class="number">30</span>,<span class="string">'12'</span>:<span class="number">31</span>&#125;</span><br><span class="line">n,y,r=eval(input(<span class="string">'please enter the date   '</span>).replace(<span class="string">'.'</span>,<span class="string">','</span>))</span><br><span class="line">total =<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n%<span class="number">4</span> ==<span class="number">0</span>:</span><br><span class="line">    RSet= set2</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">100</span>==<span class="number">0</span>:</span><br><span class="line">        RSet = set1</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">400</span>==<span class="number">0</span>:</span><br><span class="line">            RSet = set2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    RSet = set1</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> RSet.items():</span><br><span class="line">    <span class="keyword">if</span> int(i) &lt;y:</span><br><span class="line">        total = total + k </span><br><span class="line">total = total +r</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> str(total)[len(str(total))<span class="number">-1</span>]==<span class="string">'1'</span>:</span><br><span class="line">    call = <span class="string">'st'</span></span><br><span class="line"><span class="keyword">elif</span> str(total)[len(str(total))<span class="number">-1</span>]==<span class="string">'2'</span>:</span><br><span class="line">    call = <span class="string">'nd'</span></span><br><span class="line"><span class="keyword">elif</span> str(total)[len(str(total))<span class="number">-1</span>]==<span class="string">'3'</span>:</span><br><span class="line">    call=<span class="string">'rd'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    call= <span class="string">'th'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'This day is the %d'</span>%(total)+ call+<span class="string">' day in the year.'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">please enter the date   2020.7.11</span><br><span class="line">This day is the 193rd day in the year.</span><br></pre></td></tr></table></figure>

<p>This is the origin of the callnum() function, which is also very interesting. It can give the number of days depended on the date entered.</p>
<hr>
<p><strong>Considering that it is so easy to use a defined function,I will give more of them in the future and put them on the following posts.</strong></p>
<p><em>By the way after a few days I will learn to get information from the web and use it to get some data from a website.</em></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Playing Board Games(Dictionary and daily looping statements)</title>
    <url>/2020/06/23/Python5/</url>
    <content><![CDATA[<p>There is a small game that can be made in python, which is the Tic Tac Toe. </p>
<p>Actually I haven’t learnt the rules of that now, but it is still interesting in terms of codes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theBoard = &#123;<span class="string">'top-L'</span>:<span class="string">' '</span>,<span class="string">'top-M'</span>:<span class="string">' '</span>,<span class="string">'top-R'</span>:<span class="string">' '</span>,</span><br><span class="line">           <span class="string">'mid-L'</span>:<span class="string">' '</span>,<span class="string">'mid-M'</span>:<span class="string">' '</span>,<span class="string">'mid-R'</span>:<span class="string">' '</span>,</span><br><span class="line">           <span class="string">'low-L'</span>:<span class="string">' '</span>,<span class="string">'low-M'</span>:<span class="string">' '</span>,<span class="string">'low-R'</span>:<span class="string">' '</span>,&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBoard</span><span class="params">(board)</span>:</span></span><br><span class="line">    print(board[<span class="string">'top-L'</span>]+<span class="string">'|'</span>+board[<span class="string">'top-M'</span>]+<span class="string">'|'</span>+board[<span class="string">'top-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'mid-L'</span>]+<span class="string">'|'</span>+board[<span class="string">'mid-M'</span>]+<span class="string">'|'</span>+board[<span class="string">'mid-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'low-L'</span>]+<span class="string">'|'</span>+board[<span class="string">'low-M'</span>]+<span class="string">'|'</span>+board[<span class="string">'low-R'</span>])</span><br><span class="line">    </span><br><span class="line">turn=<span class="string">'X'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    printBoard(theBoard)</span><br><span class="line">    print(<span class="string">'Turn for '</span>+turn+<span class="string">'. Move on which space?'</span>)</span><br><span class="line">    move = input()</span><br><span class="line">    theBoard[move]=turn</span><br><span class="line">    <span class="keyword">if</span> turn ==<span class="string">'X'</span>:</span><br><span class="line">        turn=<span class="string">'O'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turn=<span class="string">'X'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> | | </span><br><span class="line">Turn for X. Move on which space?</span><br><span class="line">mid-M</span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> |X| </span><br><span class="line">-+-+-</span><br><span class="line"> | | </span><br><span class="line">Turn for O. Move on which space?</span><br><span class="line">low-M</span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> |X| </span><br><span class="line">-+-+-</span><br><span class="line"> |O| </span><br><span class="line">Turn for X. Move on which space?</span><br><span class="line">#(for 9 times.)</span><br></pre></td></tr></table></figure>

<p>This is not the full code for the Tic Tac Toe because there aren’t rules in the code, so the function of the code is just about showing the moves of the two players.</p>
<p><em>But there are some problems in the code: It is not automatic enough.</em></p>
<hr>
<p>However, in this small chessboard(3*3) it is nearly identical if we choose to use many cyber looping statements instead of the simple print method because there are only 9 values needed to be put on the chessboard. </p>
<p>So I decide to make the chessboard larger to 8*8, I suppose the new chessboard can be used to play some other games.</p>
<p>The positions of the ‘X’ and the ‘O’ are not very wisely represented (low/mid/top + L/M/R) so I decided to give a better way to express it, which was the letter + number, the letter gave the role and the number gave the line. (e.g A2)</p>
<p>Also the way of creating the dictionary should be changed, the typing is no longer useful because there are too many of them, so I decide to use a looping statement here.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">        theKos.setdefault(str(m)+str(i),<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>

<p>There must be a way to show the chessboard, the letters and numbers should be added because it is a very hard thing to read the chessboard without them. The looping statements should also be used because the original edition is typed directly. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">' A B C D E F G H'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    print(str(i),end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">        print(theKos[m+str(i)],end=<span class="string">'|'</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">' '</span>+<span class="string">'-+'</span>*<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>The result came out to be:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> A B C D E F G H</span><br><span class="line">1 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">2 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">3 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">4 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">5 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">6 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">7 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">8 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>

<p><em>Not bad, isn’t it?</em></p>
<p>The following part was much easier, besides the change in data, I also made it able to stop by just press the enter because there were so many moves that we have the need to stop the game before all the moves are used up.</p>
<p>The final work:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theKos=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Kosprint</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">            theKos.setdefault(str(m)+str(i),<span class="string">' '</span>)</span><br><span class="line">    print(<span class="string">'  A B C D E F G H'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        print(str(i)+<span class="string">' '</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">            print(theKos[m+str(i)],end=<span class="string">'|'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'  '</span>+<span class="string">'-+'</span>*<span class="number">8</span>)</span><br><span class="line">turn=<span class="string">'X'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">    Kosprint()</span><br><span class="line">    print(<span class="string">'Turn for '</span>+turn+<span class="string">'. Move on which space?'</span>)</span><br><span class="line">    move = input()</span><br><span class="line">    theKos[move]=turn</span><br><span class="line">    <span class="keyword">if</span> turn ==<span class="string">'X'</span>:</span><br><span class="line">        turn=<span class="string">'O'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turn=<span class="string">'X'</span></span><br><span class="line">    <span class="keyword">if</span> move==<span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  A B C D E F G H</span><br><span class="line">1  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">2  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">3  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">4  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">5  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">6  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">7  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">8  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">Turn for X. Move on which space?</span><br><span class="line">A2</span><br><span class="line">  A B C D E F G H</span><br><span class="line">1  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">2 X| | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">3  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">4  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">5  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">6  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">7  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">8  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">Turn for O. Move on which space?</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>The looping really worked, happily.</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>The &#39;%&#39; and some print skills</title>
    <url>/2020/06/18/Python4/</url>
    <content><![CDATA[<p>I tried to print the multiplication table with python, but soon I found that there is a problem with the “end=’ ‘ “. Every time I always found that the contents that should be in the next line would go to the pervious line, which means I cannot end the order.</p>
<p>However, I found that the problem can be solved by an extra space printed：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(i,<span class="string">'*'</span>,j,<span class="string">'='</span>,i*j,end=<span class="string">' '</span>)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure>



<p>The solution was simple but not so easy to find.</p>
<hr>
<p>There was also an very interesting thing that I found when I was trying to find some method for me to print the multiplication table.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,x+<span class="number">1</span>):</span><br><span class="line">        print( <span class="string">"%d*%d=%2d\t"</span> %(y,x,x*y),end=<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1*1&#x3D; 1	</span><br><span class="line">1*2&#x3D; 2	2*2&#x3D; 4	</span><br><span class="line">1*3&#x3D; 3	2*3&#x3D; 6	3*3&#x3D; 9	</span><br><span class="line">1*4&#x3D; 4	2*4&#x3D; 8	3*4&#x3D;12	4*4&#x3D;16	</span><br><span class="line">1*5&#x3D; 5	2*5&#x3D;10	3*5&#x3D;15	4*5&#x3D;20	5*5&#x3D;25	</span><br><span class="line">1*6&#x3D; 6	2*6&#x3D;12	3*6&#x3D;18	4*6&#x3D;24	5*6&#x3D;30	6*6&#x3D;36	</span><br><span class="line">1*7&#x3D; 7	2*7&#x3D;14	3*7&#x3D;21	4*7&#x3D;28	5*7&#x3D;35	6*7&#x3D;42	7*7&#x3D;49	</span><br><span class="line">1*8&#x3D; 8	2*8&#x3D;16	3*8&#x3D;24	4*8&#x3D;32	5*8&#x3D;40	6*8&#x3D;48	7*8&#x3D;56	8*8&#x3D;64	</span><br><span class="line">1*9&#x3D; 9	2*9&#x3D;18	3*9&#x3D;27	4*9&#x3D;36	5*9&#x3D;45	6*9&#x3D;54	7*9&#x3D;63	8*9&#x3D;72	9*9&#x3D;81</span><br></pre></td></tr></table></figure>



<p>The ‘%’ work as a normal variable with one character,all the contents are explained at last (<em>%(y,x,x*y)</em>)</p>
<p>The method is suitable for some complicated print missions that we have the need to put everything after them.</p>
<hr>
<p><em>So…</em></p>
<p><em>Is this method very useful?</em></p>
<p><em>maybe</em></p>
<p>I will try to use this method if some questions will need it. <em>Let’s go and see!</em></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hollow Diamond and Pascal Triangle(The importance of encapsulation)</title>
    <url>/2020/06/17/Python3/</url>
    <content><![CDATA[<p>Lately I am trying to do some works about the programming questions that was initially set for visual basic learners (I chose the economic lesson instead of the computer science so I learn nothing about visual basic ). The only difference that I had with the VB learners was that I was using the Python.</p>
<hr>
<p><strong>The first question asked us to print a hollow diamond</strong></p>
<p>I divided the diamond into 2 parts: the top and bottom line and the regular lines (which are the middle lines)</p>
<p>I do so because the first and last lines are very special with only one character printed, so the formula will be different.</p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZlgaT.png" alt="NZlgaT.png"></p>
<p>With the uses of  ‘for i in range’ , the task was completed.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=int(input())</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">2</span>,int((x+<span class="number">1</span>)/<span class="number">2</span>)+<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (int((x<span class="number">-1</span>)/<span class="number">2</span>),<span class="number">1</span>,<span class="number">-1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">     *     </span><br><span class="line">    * *    </span><br><span class="line">   *   *   </span><br><span class="line">  *     *  </span><br><span class="line"> *       * </span><br><span class="line">*         *</span><br><span class="line"> *       * </span><br><span class="line">  *     *  </span><br><span class="line">   *   *   </span><br><span class="line">    * *    </span><br><span class="line">     *</span><br></pre></td></tr></table></figure>

<p>The process really took me a long period of time, I soon realized the problem can be solved by the ‘def’ because many tough formula can be put in it.</p>
<hr>
<p>*<em>The second question asked us to print a pascal triangle *</em></p>
<p>In this question, the ‘def’ helped a lot because I didn’t know the direct order about the factorial and the combination, so I made them. (JC means the Chinese character of factorial)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">JC</span><span class="params">(x)</span>:</span></span><br><span class="line">    y=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,x+<span class="number">1</span>):</span><br><span class="line">        y=y*i </span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">C</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    final= int(JC(x)/(JC(x-y)*JC(y)))</span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>

<p>After that the problem concentrated on the space I needed to give for the triangle because the shape of it was special and between the lines the numbers went like this:</p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZ3yNT.png" alt="NZ3yNT.png"></p>
<p>I soon found that there was a rule so the problem was easy.</p>
<p>Then I need to use two loop structures(‘for i in range’) for each line and the contents in it respectively.</p>
<p>Here is the final work:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">H= int(input())</span><br><span class="line">print(<span class="string">' '</span>*H+<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,H+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">' '</span>*(H-i),end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range (i,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        print(C(i,x),end=<span class="string">' '</span>)</span><br><span class="line">        print(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">     1</span><br><span class="line">   1 2 1</span><br><span class="line">  1 3 3 1</span><br><span class="line"> 1 4 6 4 1</span><br><span class="line">1 5 10 10 5 1</span><br></pre></td></tr></table></figure>

<p>The whole process was easier than the first one because I use the ‘def’ to make the formula easier with the numbers input only. </p>
<hr>
<p><em>The encapsulation made the whole process easier to be created and easier to read.</em></p>
<p>This is what I got from this case, before doing the encapsulations the formula in the brackets really bothered me, I will try the method from now on.</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Processing Problems(something about eval)</title>
    <url>/2020/05/25/Python2/</url>
    <content><![CDATA[<p>​        <strong>The story started when a problem like this is sent to me.</strong></p>
<p><img src="https://s1.ax1x.com/2020/05/25/tCJIIS.png" alt="tCJIIS.png"></p>
<hr>
<p>Actually it was relatively simple for me, but soon I found there were something that brought me some questions:<br><img src="https://s1.ax1x.com/2020/05/25/tCJKuq.png" alt="tCJKuq.png"></p>
<p>The question asked me to make the function be exactly the same with the example, the input of data must be completed in a pair of brackets with all data in it , which meant I need to work out a way to make the data separated by some special methods that I have never learnt before, I could only make a function like this at first, which was not that perfect:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'your principal'</span>)</span><br><span class="line">P = float(input())</span><br><span class="line">print(<span class="string">'What about the annual interest rate?'</span>)</span><br><span class="line">rr= float(input())</span><br><span class="line">print(<span class="string">'what about the duration?'</span>)</span><br><span class="line">nn= float(input())</span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line">r=rr/<span class="number">12</span>/<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> r ==<span class="number">0</span>:</span><br><span class="line">    MP=P/n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    MP= P * (r*(<span class="number">1</span>+r)**n)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(MP)</span><br></pre></td></tr></table></figure>

<hr>
<p>To solve the brackets problem, I found some information about the way to separate data with a single function nicely, but unfortunately, I failed to find one, because the description about the function was not clear enough or the function never exists.</p>
<p><em>what about changing a way of thinking?</em></p>
<p>I found that the input of data can be separated from the beginning, which meant the separation of the data will be done already. Once again I searched the function with similar effect. I found it : <em>eval</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OneHaha,TwoHaha=eval(input())</span><br><span class="line">print(OneHaha)</span><br><span class="line">print(TwoHaha)</span><br></pre></td></tr></table></figure>

<p>Once I put   <em>1,2</em>   in the function, the value 1 is given to OneHaha, the value 2 is given to TwoHaha. (Nicely!!!)</p>
<p>So the function turned to this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ohhhhhhhhhhhhh</span></span><br><span class="line">P,rr,nn=eval(str(input(<span class="string">'('</span>+<span class="string">'principal, annual_interest_rate, duration '</span>+<span class="string">')'</span>).strip(<span class="string">'()'</span>)))</span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line">r=rr/<span class="number">12</span>/<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> r ==<span class="number">0</span>:</span><br><span class="line">    MP=P/n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    MP= P * (r*(<span class="number">1</span>+r)**n)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(MP)</span><br></pre></td></tr></table></figure>

<p>(By the way, I used a strip , which could remove the brackets of the input, to make this, I need to turn the input to be exactly the string, so that the strip could deal with its string.)</p>
<hr>
<p>The similar things happened when I was trying to solve the part2: Calculate the remaining balance of a loan.</p>
<p>This is the initial work(old way of input):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'principal?'</span>)</span><br><span class="line">P= float(input())</span><br><span class="line">print( <span class="string">"annual interest rate?"</span>)</span><br><span class="line">rr=float(input())</span><br><span class="line">print(<span class="string">'duration?'</span>)</span><br><span class="line">nn=float(input())</span><br><span class="line">print(<span class="string">'number of payments?'</span>)</span><br><span class="line">np=float(input())</span><br><span class="line">r=(rr/<span class="number">100</span>)/<span class="number">12</span></span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rr==<span class="number">0</span>:</span><br><span class="line">    RLB=P*(<span class="number">1</span>-np/n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    RLB=P*((<span class="number">1</span>+r)**n-(<span class="number">1</span>+r)**np)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(RLB)</span><br></pre></td></tr></table></figure>

<p>Then it turned to this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ohhhhhhhhhhhhh</span></span><br><span class="line">P,rr,nn,np=eval(str(input(<span class="string">'('</span>+<span class="string">'principal, annual_interest_rate, duration , number_of_payments'</span>+<span class="string">')'</span>).strip(<span class="string">'()'</span>)))</span><br><span class="line">P=float(P)</span><br><span class="line">rr=float(rr)</span><br><span class="line">nn=float(nn)</span><br><span class="line">np=float(np)</span><br><span class="line">r=(rr/<span class="number">100</span>)/<span class="number">12</span></span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rr==<span class="number">0</span>:</span><br><span class="line">    RLB=P*(<span class="number">1</span>-np/n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    RLB=P*((<span class="number">1</span>+r)**n-(<span class="number">1</span>+r)**np)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(RLB)</span><br></pre></td></tr></table></figure>

<p>Amazing isn’t it?</p>
<p>With the experience in part1 and part2, part3 seemed very simple.</p>
<p>Actually,  <strong>it is simple</strong>.<img src="https://s1.ax1x.com/2020/05/25/tCwnFP.png" alt="tCwnFP.png"></p>
<hr>
<p>I also asked my classmates to provide some extra methods that worked like the <em>eval</em>.</p>
<p><em>Here it is:</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t= list(input())</span><br><span class="line">t= (<span class="string">''</span>.join(t[<span class="number">1</span>:<span class="number">-1</span>])).split(<span class="string">','</span>)</span><br><span class="line">p= float (t[<span class="number">0</span>])</span><br><span class="line">r= float (t[<span class="number">1</span>])</span><br><span class="line">n= float (t[<span class="number">2</span>])</span><br><span class="line">print(p)</span><br><span class="line">print(r)</span><br><span class="line">print(n)</span><br></pre></td></tr></table></figure>

<p>(Method provided by Arya, thanks!)</p>
<hr>
<p>I haven’t learnt the function <em>eval</em> yet, so up to now I can only use it in the way I provided above only, I will learn all about this function in the future!</p>
<p><strong><em>GOOD LUCK, Ruiz!</em></strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Origin of Python</title>
    <url>/2020/05/03/Python1/</url>
    <content><![CDATA[<h2 id="Where-we-started"><a href="#Where-we-started" class="headerlink" title="Where we started"></a>Where we started</h2><p>This is my first time to use python, which is a lovely experience.  </p>
<p>Simple but vital :</p>
<p><img src="https://s1.ax1x.com/2020/05/03/YpGFH0.png" alt="YpGFH0.png"></p>
<p><strong>KEEP IT UP!</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>My biggest academic achievement</title>
    <url>/2020/05/01/My-biggest-academic-achievement/</url>
    <content><![CDATA[<h1 id="My-Biggest-Academic-Achievement"><a href="#My-Biggest-Academic-Achievement" class="headerlink" title="My Biggest Academic Achievement"></a>My Biggest Academic Achievement</h1><p>​                As a 16-year-old boy, studying takes up a large proportion of my time, I have achieved lot academically as a student, but my biggest academic achievement was my success in the senior school entrance test.</p>
<p>​                The test took me a lot of time to prepare for last year. All my peers were working very hard on it. It was all about reviewing. The test was mainly on what we had learnt in junior high, a part of the test was even on primary school work, so the range of information was quite time-consuming us to revise. Moreover, there was a huge competition among us: there were 52000 students in Nanjing taking the test to get the chance to study further. </p>
<p>​                The preparation started in the last 2 terms of junior high: We finished learning all of the junior high coursework , which was one and a half terms ahead of the official plan, this allowed us to get a full term for exam preparation. We all made a plan for ourselves according to our ability. An aim was also necessary. My initial plan was to get into the best school in Nanjing. Despite my failure to achieve my objective,my goal gave me a lot of motivation when I nearly gave up. To help us get a better grade our teachers gave us a lot of homework, which was mainly past papers many places around Nanjing or from Nanjing. These papers really worked well because the contents were quite similar to the actual papers. However, we were given a lot of papers so we were exhausted every day. </p>
<p>​                When preparing for the test got too hard some of the students gave up working for the exam, which meant that they went to a relatively bad school. I was the top student in my class, which meant my teacher had great expectations of me, and which put a lot of pressure on me, I started think about the results of the examination, which was the greatest burden on me at that time. After the whole preparation stage, I finished the examination in a few days.</p>
<p>​                The results came out after 3 weeks. Personally speaking, the result I got didn’t meet my expectation and it was not a good one. Among my classmates, I was not even in the top place . Despite all of these problems with my final result, this is my greatest achievement, because the exam was the largest one that I have ever sat. In addition, my grade was relatively good within the group of 52000 students, which meant that I got to go a good senior high school. The achievement could represent my 9-years of-study, and it was good after all.</p>
<p>​                In conclusion, the achievement gave me a new start to my studying career, it was not a bad start and I do believe that I can do better than my peers . I must say that my teachers and parents gave me a lot of support, which helped me get a better grade . I do believe that I will meet their expectations of me next time.</p>
]]></content>
      <tags>
        <tag>studyingRuiz</tag>
      </tags>
  </entry>
  <entry>
    <title>Player with magic, Cards with dragon</title>
    <url>/2020/04/24/card2/</url>
    <content><![CDATA[<p>After a few weeks’ practice, I think i can increase the cost on this hobby, hopefully I can interact with players from different countries when I start my university life!</p>
<hr>
<p>oh, by the way</p>
<h2 id="new-cards-DRAGON"><a href="#new-cards-DRAGON" class="headerlink" title="__new cards, DRAGON! __"></a>__new cards, DRAGON! __</h2><p><a href="https://imgchr.com/i/J0Cl11" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/23/J0Cl11.jpg" alt="J0Cl11.jpg"></a></p>
<p><a href="https://imgchr.com/i/J0C16x" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/23/J0C16x.jpg" alt="J0C16x.jpg"></a></p>
]]></content>
      <tags>
        <tag>magicRuizwithhiscards</tag>
      </tags>
  </entry>
  <entry>
    <title>First try</title>
    <url>/2020/04/08/card1/</url>
    <content><![CDATA[<p>Genesis of Cardistry </p>
<p><a href="https://imgchr.com/i/GRmJHA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmJHA.jpg" alt="GRmJHA.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRm1je" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRm1je.jpg" alt="GRm1je.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRm8nH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRm8nH.jpg" alt="GRm8nH.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRmGBd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmGBd.jpg" alt="GRmGBd.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRmNNt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmNNt.jpg" alt="GRmNNt.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRmtAI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmtAI.jpg" alt="GRmtAI.jpg"></a></p>
]]></content>
      <tags>
        <tag>magicRuizwithhiscards</tag>
      </tags>
  </entry>
  <entry>
    <title>Difference I found in A-Level center</title>
    <url>/2020/04/02/study-1/</url>
    <content><![CDATA[<p>I chose a quite different way with my initial classmates, which is the international education, for the following 3 years, I will make preparation for my university study in other countries. I really took a lot of time to get used to it , here are the differences I found between the study experience of me in international education and in the traditional education in China.</p>
<h2 id="About-the-teachers"><a href="#About-the-teachers" class="headerlink" title="About the teachers"></a>About the teachers</h2><p>The first lesson I took in the A-Level center is presented by a foreign teacher, whose accent was quite difficult for us to understand, after looking at the contents on the blackboard, I could get 50 percent of the points he taught, which was quite difficult for me at first. We all felt quite disappointed about the teachers in the center because we thought there might be many English teacher with good pronunciations. As one of the best English learner among us, I understood the meaning of our teachers faster than others, I found the teachers were really experienced and patient, they were all willing to help us one by one if we need,  which was a hard thing for the traditional Chinese teachers, that was because Chinese teachers were used to facing a  large amount of students at a time, some of the Chinese teachers would only tell things once so that some students could not get the points well, which was a difficult for me before. Teachers were also willing to have more communication with us , which really helped a lot with our speaking test. </p>
<h2 id="About-my-friends"><a href="#About-my-friends" class="headerlink" title="About my friends"></a>About my friends</h2><p>My classmates were quite different, after having the idea to study further in a foreign university, they were more likely to act as a international student, taking my friend Horan as an example, I found he even changed the language of his phone’s system after getting into the international lessons, I also changed my habit , I started to listen to BBC news instead of the Chinese radios, my friends gave me the idea about how to get used to the English environment. Edison from AS also gave me some help, once he took me to the teachers’ office to talk to our teachers for fun, I started to talk to my new teachers in English from then on with him, I do believe that this can make it much easier to know my teachers well if I keep talking to my teachers in English. This didn’t happen before, I didn’t talk much even with Chinese teachers. My friends really changed me a lot.</p>
<h2 id="About-the-learning-rhythm"><a href="#About-the-learning-rhythm" class="headerlink" title="About the learning rhythm"></a>About the learning rhythm</h2><p>After a quater of the study, it was the time for us to have a monthly exam, I was really surprised when I got to know there would be no revision class for our monthly test. I usually had a week for revision before the monthly test when I was in my junior high, which made most of my classmates only study in those specific weeks massively. Luckily, I did a good job in the beginning of the term in A-Level center, so I didn’t worry about the monthly test very much, simple work for revision after school was enough for me to get a high mark in the exams, from then, I started to realize the importance of the works between the monthly exams, so I worked harder on it than before. Many teachers of me told me that it was the right learning rhythm, but I think the habit was very hard to form when I was taking the traditional education because teachers before usually made the study process very short and give us a lot of time to review the contents, which made me very confused when reviewing. I think the IGCSE lesson we took didn’t have such a problem because we get the knowledge step by step, and the book for us was detailed so we can get all the points, I believe that I can learn better without getting confused and also form a better study habit than before.</p>
]]></content>
      <tags>
        <tag>studyingRuiz</tag>
      </tags>
  </entry>
  <entry>
    <title>vedio test</title>
    <url>/2020/03/29/vedio-test/</url>
    <content><![CDATA[<h3 id="vedios-from-Ruiz"><a href="#vedios-from-Ruiz" class="headerlink" title="vedios from Ruiz"></a>vedios from Ruiz</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">&lt;div style&#x3D;&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">    &lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;46303362&amp;cid&#x3D;81124889&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot; style&#x3D;&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;&gt;</span><br><span class="line">    &lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>




<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=46303362&cid=81124889&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>

]]></content>
  </entry>
  <entry>
    <title>magic improvement</title>
    <url>/2020/03/26/Ruiz-introduction/</url>
    <content><![CDATA[<p>No man is an island,<br>Entire of itself.<br>Each is a piece of the continent,<br>A part of the main.<br>If a clod be washed away by the sea,<br>Motherland is the less.<br>As well as if a promontory were.<br>As well as if a manner of thine own<br>Or of thine friend’s were.<br>Each man’s death diminishes me,<br>For I am involved in mankind.<br>Therefore, send not to know<br>For whom the bell tolls,<br>It tolls for thee.<br>Mainly by John Donne（1572－1631）</p>
]]></content>
      <tags>
        <tag>for Ruiz</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/26/hello-world/</url>
    <content><![CDATA[<p>Hello everybody, welcome!</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
</search>
