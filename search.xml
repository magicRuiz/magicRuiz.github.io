<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>An Attempt on Graph</title>
    <url>/2021/05/15/Graph-theory1/</url>
    <content><![CDATA[<p>The graph theory is very interesting, I met the graph before, when I tried to make a collection about the cast of the movie: “Iron man” . The detailed information is in the blog before: <a href="https://magicruiz.github.io/2020/11/28/the-Iron-Man-cast/#more" target="_blank" rel="noopener">The Iron Man Cast</a>.</p>
<h4 id="First-things-first-the-introduction-about-the-puzzle"><a href="#First-things-first-the-introduction-about-the-puzzle" class="headerlink" title="First things first, the introduction about the puzzle:"></a>First things first, the introduction about the puzzle:</h4><p><a href="https://imgtu.com/i/gcSkWR" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/15/gcSkWR.png" alt="gcSkWR.png"></a></p>
<p>the problem here is when I tried to make the connections, there are always one line that cannot be connected, the reason is that other lines are blocking it. This is one of the situations:</p>
<p><a href="https://imgtu.com/i/gcSYOf" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/15/gcSYOf.png" alt="gcSYOf.png"></a></p>
<p>The yellow one cannot connect to another green object!</p>
<p>It is a very obvious fact that there is no way to finish the task, the problem is: how to prove that this is impossible?</p>
<h4 id="The-proof-from-Ruiz"><a href="#The-proof-from-Ruiz" class="headerlink" title="The proof from Ruiz:"></a>The proof from Ruiz:</h4><p>I realized that I need to make the graph easier, because the only problem is about the line blocked. So I made a change like this: </p>
<p><a href="https://imgtu.com/i/gcpt3R" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/15/gcpt3R.png" alt="gcpt3R.png"></a></p>
<p>The red circle is blocked, the central square is not available for it, so the connection cannot be finished.</p>
<p>The proof stopped here, because I cannot say more about it, <em>impossible is impossible.</em></p>
<p>But obviously it is not a very satisfying proof, it didn’t suggest a very common theory for the puzzles like this. WELL, I cannot do that up to now because I am only a starter in the Graph. </p>
<h4 id="The-proof-from-3Blue1Brown"><a href="#The-proof-from-3Blue1Brown" class="headerlink" title="The proof from 3Blue1Brown:"></a>The proof from 3Blue1Brown:</h4><p>3Blue1Brown is really good at dealing with such a kind of puzzle, I hope that my English ability can have that level to tell something about mathematics like him, because his way of introducing mathematics is really acceptable and wise. </p>
<p>Overall the proof is about the difference that the lines added will make. The detailed information is all in his video. </p>
<hr>
<p>The end, I will find a way to prove this eventually, please wait, I need to find out the ways of proving systematically. </p>
<p>See you later!</p>
]]></content>
      <tags>
        <tag>mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>The NBA prediction using decision tree in Python</title>
    <url>/2021/03/13/The-NBA-prediction-using-decision-tree-in-Python/</url>
    <content><![CDATA[<h4 id="A-more-complicated-set-of-data"><a href="#A-more-complicated-set-of-data" class="headerlink" title="A more complicated set of data!"></a>A more complicated set of data!</h4><p>The Iris Flower before is a very simple set of data, so I found a more complicated data, which is about the NBA competition in 2014. The data can be obtained on this website: <a href="http://www.basketball-reference.com/leagues/NBA_2014_games.html" target="_blank" rel="noopener">http://www.basketball-reference.com/leagues/NBA_2014_games.html</a>. </p>
<p>The basic things about the decision tree was presented in the previous post.</p>
<p>So what I was doing was using the information before to predict the future games’ result.</p>
<p>So let’s start directly!</p>
<hr>
<h4 id="Basic-ideas-to-achieve-this"><a href="#Basic-ideas-to-achieve-this" class="headerlink" title="Basic ideas to achieve this"></a>Basic ideas to achieve this</h4><p>The columns in the csv file looks like this(10 columns in total):</p>
<p><strong>Date</strong>    </p>
<p><strong>Start(ET)</strong>   </p>
<p><strong><em>Visitor Team</em></strong>    </p>
<p><strong><em>VisitorPts</em></strong>  </p>
<p><strong><em>Home Team</em></strong>   </p>
<p><strong><em>HomePts</em></strong> </p>
<p><strong>Score Type</strong>  </p>
<p><strong>OT?</strong> </p>
<p><strong>Attend</strong>  </p>
<p><strong>Notes</strong></p>
<p>The italic part is what I thought was matter. </p>
<p>I didn’t watch the NBA games a lot, I prefer the football games, but according to my friend Han’s information, the Visitor Team and the Home Team will have a trend when competing: the Home Team will have a larger probability to win.</p>
<p>So I made a few parameters (<em>The ideas of making the parameters starts when I was learning Physics and Statistics, attention here, very useful!</em>) : </p>
<p><strong>The mark difference of each games(markdifference)</strong></p>
<p><strong>The properties of the team when it was a home team(heasefeature),or how easy it was to win the game when the team was the home team</strong></p>
<p><strong>The properties of the team when it was a visitor team(veasefeature),or how easy it was to win the game when the team was the visitor team</strong></p>
<p>The first parameter can obtain the next two parameters,details are in the code.</p>
<p>So after getting the basic parameter, the corresponding  results goes like’ visitor win’ or ‘home win’. The training can go by entering the parameters and the results arrays.</p>
<p>There are 1316 games’ data recorded here, I took the 1000 games to train and 316 games rest to do the test.</p>
<hr>
<h4 id="Programming-part"><a href="#Programming-part" class="headerlink" title="Programming part"></a>Programming part</h4><p>Import first.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br></pre></td></tr></table></figure>

<p>Then obtain the data from the csv file.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = <span class="string">'leagues_NBA_2014_games.csv'</span></span><br><span class="line">dataset = pd.read_csv(path, parse_dates=[<span class="string">'Date'</span>])</span><br><span class="line">dataset.columns = [</span><br><span class="line">    <span class="string">'Date'</span>, <span class="string">'Start(ET)'</span>, <span class="string">'Visitor Team'</span>, <span class="string">'VisitorPts'</span>, <span class="string">'Home Team'</span>, <span class="string">'HomePts'</span>,</span><br><span class="line">    <span class="string">'Score Type'</span>, <span class="string">'OT?'</span>, <span class="string">'Attend'</span>, <span class="string">'Notes'</span></span><br><span class="line">]</span><br><span class="line">dataset</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/6W5C0P" target="_blank" rel="noopener"><img src="https://s4.ax1x.com/2021/03/19/6W5C0P.png" alt="6W5C0P.png"></a></p>
<p>The markdifference parameter</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">markdifference=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1316</span>):</span><br><span class="line">    Homenum=int(dataset[<span class="string">'HomePts'</span>][i])</span><br><span class="line">    Visitornum=int(dataset[<span class="string">'VisitorPts'</span>][i])</span><br><span class="line">    temp=(Homenum-Visitornum)/((Homenum+Visitornum))</span><br><span class="line">    markdifference.append(temp)</span><br><span class="line">markdifference=np.array(markdifference)</span><br><span class="line">markdifference</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([-0.06      ,  0.01041667,  0.0776699 , ..., -0.07177033,</span><br><span class="line">        0.06481481, -0.02197802])</span><br></pre></td></tr></table></figure>

<p>The veasefeature,heasefeature parameter</p>
<p>Note here: the vease and the hease variables are the <strong>teams’</strong> properties. For each game, the properties of each game which is the  veasefeature, heasefeature parameters is just the redistribution of the data according to what team played as the home team and what team played as the visitor team. So just put the vease of the team which was the visitor team and put the hease of the team which was the home team. </p>
<p>The vease and the hease comes from the markdiffrerences of the teams in each games. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vease=&#123;&#125;</span><br><span class="line">hease=&#123;&#125;</span><br><span class="line">veasefeature=[]</span><br><span class="line">heasefeature=[]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> Teams:</span><br><span class="line">    vease[j]=<span class="number">0</span></span><br><span class="line">    hease[j]=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Teams:</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1000</span>): </span><br><span class="line">        <span class="keyword">if</span> i == dataset[<span class="string">'Home Team'</span>][k]:</span><br><span class="line">            hease[i]=hease[i]+markdifference[k]</span><br><span class="line"><span class="comment">#for the home teams, the more postive the mark differences are, the easier they won as a home team, so add the markdifference up in order to stands for the ease</span></span><br><span class="line">        <span class="keyword">if</span> i==dataset[<span class="string">'Visitor Team'</span>][k]:</span><br><span class="line">            vease[i]=vease[i]-markdifference[k]</span><br><span class="line"><span class="comment">#for the visitor teams, the things goes reverse, the negative markdifferences stand for the ease of the visitor team winning, so minus the markdifference in order to calculate the ease for each team</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    veasefeature.append(vease[dataset[<span class="string">'Visitor Team'</span>][k]])</span><br><span class="line">    heasefeature.append(hease[dataset[<span class="string">'Home Team'</span>][k]])</span><br></pre></td></tr></table></figure>

<p>some defs:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">featruemakeing</span><span class="params">(h,v)</span>:</span></span><br><span class="line">    feature=[hease[h],vease[v]]</span><br><span class="line">    feature=np.array(feature)</span><br><span class="line">    <span class="keyword">return</span> feature</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">featuretrainget</span><span class="params">(i)</span>:</span></span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        temp.append(i[k])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure>

<p>The ‘<strong><em>featurefinal</em></strong>‘ is an summary of the data, because the form of the data given for training must be an array.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">featurefinal=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    vf=featuretrainget(veasefeature)[i]</span><br><span class="line">    hf=featuretrainget(heasefeature)[i]</span><br><span class="line">    featurefinal.append([hf,vf])</span><br><span class="line">featurefinal=np.array(featurefinal)</span><br><span class="line"></span><br><span class="line">print(featurefinal)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[ 0.93140748 -0.77666025]</span><br><span class="line"> [ 0.21078442  0.75953224]</span><br><span class="line"> [ 2.18608326 -1.239629  ]</span><br><span class="line"> ...</span><br><span class="line"> [ 0.64651469  0.35392433]</span><br><span class="line"> [-1.10795178 -0.47935976]</span><br><span class="line"> [ 0.05795612  0.44835829]]</span><br></pre></td></tr></table></figure>

<p>Training, the result given corresponding to the ‘<strong><em>featurefinal</em></strong>‘ is given by a simple deduction of the value of the markdifference(postive markdifference is home team winning,vice versa).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ans=np.array(featuretrainget(markdifference))</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    result.append(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans)):</span><br><span class="line">    <span class="keyword">if</span> ans[i]&gt;<span class="number">0</span>:</span><br><span class="line">        result[i]=<span class="string">'home win'</span></span><br><span class="line">    <span class="keyword">if</span> ans[i]&lt;<span class="number">0</span>:</span><br><span class="line">        result[i]=<span class="string">'visitor win'</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line">clf = clf.fit(featurefinal,result)</span><br></pre></td></tr></table></figure>

<p>Testing, the result output was ‘home win or visitor win’, I could make the program output the possible markdifference, but this program can only output the ‘type’ other that the actual mark.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=<span class="number">0</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>,<span class="number">1316</span>):</span><br><span class="line">    n = n+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> clf.predict([featruemakeing(Homet[i],Visitort[i])])==ansresult[i]:</span><br><span class="line">        print(<span class="string">'1'</span>)</span><br><span class="line">        r = r+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'0'</span>)</span><br></pre></td></tr></table></figure>

<p>output was so long with the ‘1’s and ‘0’s , ‘1’ was the right prediction of the games,vice versa. </p>
<p>Just calculate the rate of successful predictions directly.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r/n)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.6645569620253164</span><br></pre></td></tr></table></figure>

<p>that was pretty good, very high!</p>
<hr>
<p>My description may be not very clear as I am not an native speaker or an expert in doing that, I think that looking at my code is also okay. What I mean is that what is really matter is the basic thoughts and the codes.</p>
<p>So, we can have the prediction for the next 316 games, well done!</p>
<h4 id="Overall"><a href="#Overall" class="headerlink" title="Overall"></a>Overall</h4><p>Firstly, having an idea, clearly.</p>
<p>Then, do it!</p>
<p> By the way, the ideas that I had contains some relative mathematics ideas like making up the parameters.(I think this is a very important core idea in the statistics and Physics.) So this post is reasonable to be put under the mathematics tag.</p>
<p>This program is based on the idea of senior Chen Siyu, he also gave me a lot of help in the process of programming, special thanks to him!</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Decision Tree</title>
    <url>/2021/03/13/Python-Decision-Tree/</url>
    <content><![CDATA[<h4 id="This-is-the-method-to-predict-the-future"><a href="#This-is-the-method-to-predict-the-future" class="headerlink" title="This is the method to predict the future!"></a>This is the method to predict the future!</h4><hr>
<p><strong>Quite complicated definition of the decision tree:</strong></p>
<p>Decision Tree is a Decision analysis method to obtain the probability that the expected value of NPV is greater than or equal to zero, evaluate the project risk and judge its feasibility on the basis of the known probability of occurrence of various situations by forming a Decision Tree. It is a graphical method of intuitive use of probability analysis.</p>
<hr>
<p>The definition above is not a very understandable thing for me to read, what I can tell is that when we are using the decision tree in python, the decision tree is used in a encapsulated program, what I need to do is make the data used to train it readable for the program. This means that I only need to have the data collected and preprocessed so that the program can use it better. So this is my mission at this step. About the basic principle of the decision tree, well… , I know it , but not so much, and it will be very hard for me to state it here. But a simpler way of telling the decision tree is needed to state(and it is concluded by me):</p>
<h4 id="The-decision-tree-is-a-large-amount-of-“if”-nested-together"><a href="#The-decision-tree-is-a-large-amount-of-“if”-nested-together" class="headerlink" title="The decision tree is a large amount of “if” nested together."></a><em>The decision tree is a large amount of “if” nested together.</em></h4><p><em>And I would like to call it a rule finding process.</em></p>
<hr>
<p>To use the decision tree, I did some basic practice first, which was the classic data about ‘Iris Flower’.</p>
<p>Three kinds of Iris flower here, they make differences by different kind of data of their sepals and petals.  And I need to train the decision tree to make it get the rule inside.</p>
<p>The basic idea here is showing the data, then showing the corresponding results, they are all put in the training function called clf.fit(<strong><em>The data,The kind of flower</em></strong>), the things in the brackets are all arrays, which means the first object in ‘<strong><em>The data</em></strong>‘ is the data of the kind shown by the first object in ‘<strong><em>The kind of flower</em></strong>‘. The length of the two arrays are exactly the same, of course. </p>
<p>The program encapsulated will do the rest and get the rules, then using a prediction function called clf.predict(<strong><em>the test data</em></strong>) to predict the actual kind of flower.(The’ <strong><em>test data</em></strong> ‘should be in the same form comparing to the objects in the ‘<strong><em>The data</em></strong>‘ array) . Everything must be in order so it can make sense to the program.</p>
<h4 id="Programming-starts"><a href="#Programming-starts" class="headerlink" title="Programming starts!"></a>Programming starts!</h4><hr>
<p>Firstly , import something</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier <span class="comment">#this is the decision tree part in the sklearn package</span></span><br></pre></td></tr></table></figure>

<p>Then the data is put in the program.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">"./irisFlowers.csv"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">SEPAL_LENGTH	SEPAL_WIDTH	PETAL_LENGTH	PETAL_WIDTH	Class</span><br><span class="line">0	5.1	        3.5	        1.4	            0.2	        setosa</span><br><span class="line">1	4.9	        3.0	        1.4	            0.2	        setosa</span><br><span class="line">2	4.7	        3.2	        1.3	            0.2	        setosa</span><br><span class="line">3	4.6	        3.1	        1.5	            0.2	        setosa</span><br><span class="line">4	5.0	        3.6	        1.4          	0.2	        setosa</span><br><span class="line">...	...			...			...				...			...</span><br><span class="line">145	6.7			3.0			5.2				2.3			virginica</span><br><span class="line">146	6.3			2.5			5.0				1.9			virginica</span><br><span class="line">147	6.5			3.0			5.2			    2.0			virginica</span><br><span class="line">148	6.2			3.4			5.4			    2.3			virginica</span><br><span class="line">149	5.9			3.0			5.1			    1.8			virginica</span><br><span class="line">150 rows × 5 columns</span><br></pre></td></tr></table></figure>

<p>Then let’s have an overview of the distribution:</p>
<p><a href="https://imgtu.com/i/6W59mt" target="_blank" rel="noopener"><img src="https://s4.ax1x.com/2021/03/19/6W59mt.png" alt="6W59mt.png"></a></p>
<p>70% of The data is used to train the decision tree and the left 30% is going to be used to test the decision tree made. </p>
<p>So preprocess the data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lenandwid=[]</span><br><span class="line">kindof=[]</span><br><span class="line">testlenandwid=[]</span><br><span class="line">testkindof=[]</span><br><span class="line">df = df.sample(frac=<span class="number">1</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">105</span>):</span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):        </span><br><span class="line">        temp.append(df.iloc[i][k])</span><br><span class="line">    lenandwid.append(temp)</span><br><span class="line">    kindof.append(df.iloc[i][<span class="number">4</span>])</span><br><span class="line">lenandwid=np.array(lenandwid)</span><br><span class="line">kindof=np.array(kindof)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">105</span>,<span class="number">150</span>):</span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):        </span><br><span class="line">        temp.append(df.iloc[i][k])</span><br><span class="line">    testlenandwid.append(temp)</span><br><span class="line">    testkindof.append(df.iloc[i][<span class="number">4</span>])</span><br><span class="line">testlenandwid=np.array(testlenandwid)</span><br><span class="line">testkindof=np.array(testkindof)</span><br></pre></td></tr></table></figure>

<p>The training part.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line">clf = clf.fit(lenandwid,kindof)</span><br></pre></td></tr></table></figure>

<p>The testing part.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rightorwrong=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(testlenandwid)):</span><br><span class="line">    predict= clf.predict([testlenandwid[i]])</span><br><span class="line">    right = testkindof[i]</span><br><span class="line">    <span class="keyword">if</span> predict == right:</span><br><span class="line">        rightorwrong.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rightorwrong.append(<span class="number">0</span>)</span><br><span class="line">print(rightorwrong)</span><br><span class="line">print(len(rightorwrong))</span><br><span class="line">n =<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> rightorwrong:</span><br><span class="line">    <span class="keyword">if</span> k ==<span class="number">1</span> :</span><br><span class="line">        n=n+<span class="number">1</span></span><br><span class="line">prob=n/len(rightorwrong)</span><br><span class="line">print(prob)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span><br><span class="line">45</span><br><span class="line">0.9555555555555556</span><br></pre></td></tr></table></figure>

<p>That rate will change from time to time, but it will never be low as this data is quite straight forward.</p>
<hr>
<h4 id="Overall"><a href="#Overall" class="headerlink" title="Overall"></a>Overall</h4><p>This is not so hard to train, <em>for more complicated cases, the mathematical method may help.</em></p>
<p>This program is based on the idea of senior Chen Siyu, he also gave me a lot of help in the process of programming, thank you!</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>About the uses of GeoGebra(polar coordinate)</title>
    <url>/2021/03/13/About-the-uses-of-GeoGebra-polar-coordinate/</url>
    <content><![CDATA[<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>The GeoGebra is a main mathematics tool that are always used by me, I think it really helped in the process of making the graph of the 3-dimentional vectors or the planes, for who haven’t used that, I highly recommend. </p>
<p>However, some problems are found by me, which is about the polar coordinate. When I was trying to find some ways to draw a polar function, I could not enter the equation directly so I must use a function in GeoGebra called’ Curve()’ , it just goes like this.</p>
<p><a href="https://imgtu.com/i/6de3t0" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/13/6de3t0.png" alt="6de3t0.png"></a></p>
<p>This is the way to draw the diagram r=cos(θ), the function is acting as what we do to when trying to transfer the normal function to the polar function. This method was from the Baidu, I thought this is a pretty good solution to the function. But there is a problem found by me lately. </p>
<p>The problem turns out when I was trying to draw the diagram like r=2+4cos(θ) maybe you can see the problem through the way that I entered the equations. </p>
<h4 id="Here-is-the-problem"><a href="#Here-is-the-problem" class="headerlink" title="Here is the problem!"></a>Here is the problem!</h4><p>The r stands for the distance that the point on the curve from the origin O, <strong>it cannot be a negative value!</strong> So if I just enter the equation like this, the negative ‘distance’ will also be presented on the diagram! </p>
<p><a href="https://imgtu.com/i/6dew7R" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/13/6dew7R.png" alt="6dew7R.png"></a></p>
<p>So the small circle in side the big one is the extra part whose r is negative value, the true diagram goes like this:</p>
<p><a href="https://imgtu.com/i/6deBA1" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/13/6deBA1.png" alt="6deBA1.png"></a></p>
<p>Just remove the negative part.</p>
<p>If we look at the diagram of the y=2+4cos(x), the part beneath the X-axis is what we need to remove.</p>
<p><a href="https://imgtu.com/i/6de61O" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/13/6de61O.png" alt="6de61O.png"></a></p>
<p>So my method of having a right diagram is having two curve function of the positive part only in order to remove the negative part.</p>
<p><a href="https://imgtu.com/i/6dmkDJ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/13/6dmkDJ.png" alt="6dmkDJ.png"></a></p>
<h4 id="Overall-the-problem-is-the-difference-between-my-command-to-the-computer-and-the-actual-definition-of-what-I-need"><a href="#Overall-the-problem-is-the-difference-between-my-command-to-the-computer-and-the-actual-definition-of-what-I-need" class="headerlink" title="Overall, the problem is the difference between my command to the computer and the actual definition of what I need."></a>Overall, the problem is the difference between my command to the computer and the actual definition of what I need.</h4>]]></content>
      <tags>
        <tag>mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>About the Mathematics in My Mind</title>
    <url>/2021/02/07/mathematics-origin/</url>
    <content><![CDATA[<h3 id="Hello-mathematics"><a href="#Hello-mathematics" class="headerlink" title="Hello, mathematics!"></a>Hello, mathematics!</h3><h4 id="Why-not-in-a-hurry"><a href="#Why-not-in-a-hurry" class="headerlink" title="Why not in a hurry?"></a>Why not in a hurry?</h4><p>For the beginning of this tag, I would like to share my opinion about this subject. It is really a very strange thing that I opened this tag so late, the programming part should be introduced after the mathematics because what I am doing are mainly about how to use programming to do something about the mathematics, but I decided to open it after I have some questions and the resources to solve it so that the whole process is worth sharing. </p>
<p>The advanced learning of Further Mathematics made this happened.</p>
<hr>
<h4 id="So-for-the-start-of-this-sharing-the-mathematics-in-my-mind-should-be-shown"><a href="#So-for-the-start-of-this-sharing-the-mathematics-in-my-mind-should-be-shown" class="headerlink" title="So, for the start of this sharing, the mathematics in my mind should be shown."></a>So, for the start of this sharing, the mathematics in my mind should be shown.</h4><p>Mathematics is a subject with wide uses and it really made a big difference to the whole world. I totally agree with this idea since I knew more about the connection between integration and the mechanics in my junior high. I love mathematics because I believe that this subject has an infinite possibility and I hope myself can push our knowledge closer to the truth. In my opinion the studies in the mathematics are just like a process of denying what we have known and create a brand-new system that can be explained in a different way. For example, before the middle school, we called the square root of -1 ‘undefined’ in order to show that it is different to get this number or to use it. But now I can call it ‘i’ as a new part of the number system. In physics, the definition of the infinitely small make the uses of integration become possible, the impact is definitely vital. I was impressed by how close it is to the ‘impossible’ but how beautifully it is defined. Overall, the renovation in mathematics eliminates the impossible things and at the same time, creating new impossible things. That is why I am looking forward to explore it further.</p>
<hr>
<h4 id="That’s-all-for-now…maybe"><a href="#That’s-all-for-now…maybe" class="headerlink" title="That’s all for now…maybe?"></a>That’s all for now…maybe?</h4><p>I found this way to understand what mathematics learn and how exactly it is attracting by hearing from my teachers in all stages who always say that what were told to us previously are only few parts of the truth. So after having a dense learning experience lately, I just wrote it down.</p>
<p>Of course this opinion will change, I am sure that the change won’t take me so long.</p>
<p><em>So…here we go!</em></p>
]]></content>
      <tags>
        <tag>Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>The Past Paper Classification System</title>
    <url>/2021/01/19/the-pastpaper-classification-system/</url>
    <content><![CDATA[<h5 id="A-classification-is-needed"><a href="#A-classification-is-needed" class="headerlink" title="A classification is needed!"></a>A classification is needed!</h5><p>These days I was having the end-of-term examination, I needed a lot of past papers in order to make sure that I was ok about those examination. However, the things I have was only some past paper mixed up with all kind of papers in many folders so I decided to make the things easier for me. So I made a classification program. </p>
<hr>
<p>Firstly, I would like to state the initial situation that I had about the past papers.</p>
<p><a href="https://imgchr.com/i/s2jqWF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/19/s2jqWF.png" alt="s2jqWF.png"></a></p>
<p><a href="https://imgchr.com/i/s2vwfU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/19/s2vwfU.png" alt="s2vwfU.png"></a></p>
<p><a href="https://imgchr.com/i/s2vDl4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/19/s2vDl4.png" alt="s2vDl4.png"></a></p>
<p>This task is not so hard.</p>
<hr>
<h5 id="The-coding-part"><a href="#The-coding-part" class="headerlink" title="The coding part"></a>The coding part</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br></pre></td></tr></table></figure>

<p><em>defining, very useful trick</em> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transferpaper</span><span class="params">(y,t,num)</span>:</span></span><br><span class="line">    targetms=<span class="string">"C:\\Users\\Ruiz\\Desktop\\AS\\chemistry\\chemistry pastpaper\\chemistry pastpaper\\%d%s\\ms"</span>%(y,t)</span><br><span class="line">    targetqp=<span class="string">"C:\\Users\\Ruiz\\Desktop\\AS\\chemistry\\chemistry pastpaper\\chemistry pastpaper\\%d%s\\qp"</span>%(y,t)</span><br><span class="line">    y1=str(y<span class="number">-2000</span>).zfill(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        targetms1=targetms+<span class="string">'\\9701_%s%s_ms_%d%d.pdf'</span>%(t,y1,num,g)</span><br><span class="line">        targetqp1=targetqp+<span class="string">'\\9701_%s%s_qp_%d%d.pdf'</span>%(t,y1,num,g)</span><br><span class="line">        finalms=<span class="string">"C:\\Users\\Ruiz\\Desktop\\noname\\%d\\%d%d\\%s"</span>%(y,num,g,<span class="string">'ms'</span>)</span><br><span class="line">        finalqp=<span class="string">"C:\\Users\\Ruiz\\Desktop\\noname\\%s\\%d%d\\%s"</span>%(y,num,g,<span class="string">'qp'</span>)</span><br><span class="line">        shutil.copy(targetms1,finalms)</span><br><span class="line">        shutil.copy(targetqp1,finalqp)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#main(final)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'from which year to 2019?'</span>)</span><br><span class="line">yre=int(input())</span><br><span class="line">print(<span class="string">'which paper exactly?'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (yre,<span class="number">2020</span>):</span><br><span class="line">    os.makedirs(<span class="string">"C:\\Users\\Ruiz\\Desktop\\noname\\%s"</span>%str(i)) </span><br><span class="line">num = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(yre,<span class="number">2020</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> what <span class="keyword">in</span> [<span class="string">'qp'</span>,<span class="string">'ms'</span>]:</span><br><span class="line">            os.makedirs(<span class="string">"C:\\Users\\Ruiz\\Desktop\\noname\\%d\\%d%d\\%s"</span>%(y,num,i,what))</span><br><span class="line">            </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(yre,<span class="number">2020</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> [<span class="string">'S'</span>,<span class="string">'W'</span>]:</span><br><span class="line">        transferpaper(y,t,num)</span><br><span class="line">        </span><br><span class="line">print(<span class="string">'the name of the new folder?'</span>)</span><br><span class="line">name = input()</span><br><span class="line"><span class="keyword">if</span> name!= <span class="string">''</span>:</span><br><span class="line">    os.rename(<span class="string">'C:\\Users\\Ruiz\\Desktop\\noname'</span>,<span class="string">'C:\\Users\\Ruiz\\Desktop\\%s'</span>%name)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from which year to 2019?</span><br><span class="line">2014</span><br><span class="line">which paper exactly?</span><br><span class="line">1</span><br><span class="line">the name of the new folder?</span><br><span class="line">chemistry mcq</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h5><p>Two tricks here: the ‘%’ and the ‘def’, just as I mentioned before, these trick have their use and I think they are excellent for a user who want to create very neat codes and easy editing  of them.  </p>
<p>The task is not hard but quite useful. It is my first time to use such a kind of code to make things easier because the work I did before are complicated without the uses of tricks, I can really use this code to save my time now. <em>Great!</em></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Morning America! how much for breakfast?</title>
    <url>/2020/12/06/Good-Morning-America-how-much-for-breakfast/</url>
    <content><![CDATA[<p><strong>This is a small task, or at least in my opinion, a simple one</strong></p>
<p>so here we go!</p>
<p>This time I am going to make a program which has a of collecting the information of what to eat for breakfast and then calculate the cost for this meal, I have a kind of assignment pdf file for me to tell what to do, so I need to follow the instruction of the file, which is the only thing that I need to pay attention to.</p>
<hr>
<p> According to the experience of last few times, I tried to have a few defined functions so that I can make the whole thing easier, so at first it should be:</p>
<h4 id="The-function-part"><a href="#The-function-part" class="headerlink" title="The function part"></a>The function part</h4><p>In this task we need to help others ordering what to eat, 3 kinds of set meals are set in this task and the different food we can order additionally is also exist. </p>
<p><em>The first function is provided by the pdf file :</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatInput</span><span class="params">(textLine)</span> :</span></span><br><span class="line">    textLine = textLine.lower().strip() </span><br><span class="line">    wordList = textLine.split() </span><br><span class="line">    textLine = <span class="string">" "</span>.join(wordList) </span><br><span class="line">    <span class="keyword">return</span> textLine</span><br></pre></td></tr></table></figure>

<p>It can make the input in a certain format,which is quite useful to avoid the typing error.</p>
<p><em>The other one is the object adding function:</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">objadd</span><span class="params">(dic,obj,num)</span>:</span></span><br><span class="line">    dic[obj]=dic[obj]+num</span><br><span class="line">    <span class="keyword">return</span>(dic)</span><br></pre></td></tr></table></figure>

<p>It can select one key in the dictionary and add the certain value to the value.</p>
<p>The task also said that when we are calculating the value of the foods we cannot just see the set meal as a whole, we need to make the set meals separate so the foods will be calculated by their kinds only instead of some sets and kinds.</p>
<p><em>The process of making the set meals to different kinds of food is called collection of object by me.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collectobj</span><span class="params">(total)</span>:</span></span><br><span class="line">    <span class="comment">#collect big</span></span><br><span class="line">    n= total[<span class="string">'big breakfast'</span>]</span><br><span class="line">    total=objadd(total,<span class="string">'egg'</span>,<span class="number">3</span>*n)</span><br><span class="line">    total=objadd(total,<span class="string">'hash brown'</span>,<span class="number">2</span>*n)</span><br><span class="line">    total=objadd(total,<span class="string">'toast'</span>,<span class="number">4</span>*n)</span><br><span class="line">    total=objadd(total,<span class="string">'bacon'</span>,<span class="number">6</span>*n)</span><br><span class="line">    total=objadd(total,<span class="string">'sausage'</span>,<span class="number">3</span>*n)</span><br><span class="line">    <span class="comment">#collect small</span></span><br><span class="line">    m= total[<span class="string">'small breakfast'</span>]</span><br><span class="line">    total=objadd(total,<span class="string">'egg'</span>,<span class="number">1</span>*m)</span><br><span class="line">    total=objadd(total,<span class="string">'hash brown'</span>,<span class="number">1</span>*m)</span><br><span class="line">    total=objadd(total,<span class="string">'toast'</span>,<span class="number">2</span>*m)</span><br><span class="line">    total=objadd(total,<span class="string">'bacon'</span>,<span class="number">2</span>*m)</span><br><span class="line">    total=objadd(total,<span class="string">'sausage'</span>,<span class="number">1</span>*m)</span><br><span class="line">    <span class="comment">#collect regular</span></span><br><span class="line">    q= total[<span class="string">'regular breakfast'</span>]</span><br><span class="line">    total=objadd(total,<span class="string">'egg'</span>,<span class="number">2</span>*q)</span><br><span class="line">    total=objadd(total,<span class="string">'hash brown'</span>,<span class="number">1</span>*q)</span><br><span class="line">    total=objadd(total,<span class="string">'toast'</span>,<span class="number">2</span>*q)</span><br><span class="line">    total=objadd(total,<span class="string">'bacon'</span>,<span class="number">4</span>*q)</span><br><span class="line">    total=objadd(total,<span class="string">'sausage'</span>,<span class="number">2</span>*q)</span><br><span class="line">    newtotal=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> total.keys():</span><br><span class="line">        <span class="keyword">if</span> i!=<span class="string">'big breakfast'</span> <span class="keyword">or</span> <span class="string">'small breakfast'</span>o<span class="string">r'regular breakfast'</span>:</span><br><span class="line">            newtotal[i]=total[i]</span><br><span class="line">    <span class="keyword">return</span> newtotal</span><br></pre></td></tr></table></figure>

<p><em>The next one is the calculating function which can give a product of the amount of one kind of food and the price of it:</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcu</span><span class="params">(dic,num)</span>:</span></span><br><span class="line">    cost=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> kindcost.keys():</span><br><span class="line">        cost = cost + num[i]*dic[i]</span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure>

<p>This is the most useful function for me because it can make the process very straight forward.</p>
<h4 id="The-main-codes-for-the-task"><a href="#The-main-codes-for-the-task" class="headerlink" title="The main codes for the task"></a>The main codes for the task</h4><p>There are some very strict rules of output so the printing part is a little bit complicated and the rest of the function is quite normal.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#main</span></span><br><span class="line">kinds = [<span class="string">'small breakfast'</span>,<span class="string">'regular breakfast'</span>,<span class="string">'big breakfast'</span>,<span class="string">"egg"</span>,<span class="string">'bacon'</span>,<span class="string">'sausage'</span>,<span class="string">'hash brown'</span>,<span class="string">'toast'</span>,<span class="string">'coffee'</span>,<span class="string">'tea'</span>]</span><br><span class="line">kindcost=&#123; <span class="string">'egg'</span>: <span class="number">0.99</span>, <span class="string">'bacon'</span>: <span class="number">0.49</span>, <span class="string">'sausage'</span>: <span class="number">1.49</span>, <span class="string">'hash brown'</span>: <span class="number">1.19</span>, <span class="string">'toast'</span>: <span class="number">0.79</span>, <span class="string">'coffee'</span>: <span class="number">1.09</span>, <span class="string">'tea'</span>: <span class="number">0.89</span>&#125;</span><br><span class="line">total=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> kinds:</span><br><span class="line">    total[i]=<span class="number">0</span></span><br><span class="line"><span class="comment">#total=&#123;'small breakfast': 1, 'regular breakfast': 0, 'big breakfast': 0, 'egg': 0, 'bacon': 0, 'sausage': 0, 'hash brown':0 , 'toast':0 , 'coffee': 0, 'tea': 0&#125;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    print(<span class="string">"Enter item (q to terminate): small breakfast, regular breakfast, big breakfast, egg, bacon, sausage, hash brown, toast, coffee, tea:"</span>,end=<span class="string">""</span>)</span><br><span class="line">    kind = formatInput(input())</span><br><span class="line">    <span class="keyword">if</span> kind ==<span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> kind <span class="keyword">not</span> <span class="keyword">in</span> kinds:</span><br><span class="line">        print()</span><br><span class="line">        print(<span class="string">'not exist!'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">"Enter quantity :"</span>,end=<span class="string">""</span>)</span><br><span class="line">    quantity= int(input())</span><br><span class="line">    <span class="keyword">if</span> kind <span class="keyword">in</span> total.keys():</span><br><span class="line">        total[kind]=total[kind]+quantity</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        total[kind]=quantity</span><br><span class="line">totalche=total</span><br><span class="line">total = collectobj(total)</span><br><span class="line">cost =<span class="number">0</span></span><br><span class="line">cost = calcu(kindcost,total)</span><br><span class="line">tax = <span class="number">0.13</span>*cost</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'Cost :%.2f'</span>%(cost))</span><br><span class="line">print(<span class="string">'Tax : %.2f'</span>%(tax))</span><br><span class="line">print(<span class="string">'Total : %.2f'</span>%(cost+tax))</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'Process finished with exit code 0'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter item (q to terminate): small breakfast, regular breakfast, big breakfast, egg, bacon, sausage, hash brown, toast, coffee, tea:big breakfast</span><br><span class="line">Enter quantity :2</span><br><span class="line">Enter item (q to terminate): small breakfast, regular breakfast, big breakfast, egg, bacon, sausage, hash brown, toast, coffee, tea:small breakfast</span><br><span class="line">Enter quantity :1</span><br><span class="line">Enter item (q to terminate): small breakfast, regular breakfast, big breakfast, egg, bacon, sausage, hash brown, toast, coffee, tea:coffee</span><br><span class="line">Enter quantity :1</span><br><span class="line">Enter item (q to terminate): small breakfast, regular breakfast, big breakfast, egg, bacon, sausage, hash brown, toast, coffee, tea:tea</span><br><span class="line">Enter quantity :2</span><br><span class="line">Enter item (q to terminate): small breakfast, regular breakfast, big breakfast, egg, bacon, sausage, hash brown, toast, coffee, tea:q</span><br><span class="line">Cost :40.94</span><br><span class="line">Tax : 5.32</span><br><span class="line">Total : 46.26</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p>By the way the “Process finished with exit code 0” is new for me so I have no idea that how to print this(simply print() or some other ways I think this sentence has some specific functions so It should be used with something)</p>
<p>The output of my function is almost the same as the one in the file, good job!</p>
<p> <a href="https://imgchr.com/i/DO568f" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/06/DO568f.png" alt="DO568f.png"></a></p>
<hr>
<p>That is a task which is not so hard, I made myself better at encapsulation this time.</p>
<p>(By the way, I did this ahead of others so I can have a prize after telling the whole code in front of them. I can even get a prize for that, I don’t know what it is so I am expecting for something that I really like)</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>The Iron Man Cast</title>
    <url>/2020/11/28/the-Iron-Man-cast/</url>
    <content><![CDATA[<h3 id="About-this-analysis"><a href="#About-this-analysis" class="headerlink" title="About this analysis"></a>About this analysis</h3><p>This time I did a series of analysis about the movies and the relative information about the movies. For the data, I used a .json document full of the movies’ data and there are a lot of movies’ casts, producer’s names in it, I can search most movies with a proper way.</p>
<p>Before doing that, I would like to introduce the things what we need to import:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> pyvis.network <span class="keyword">import</span> Network</span><br></pre></td></tr></table></figure>

<p>and we put the data in a list and get some basic information about the work:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Movies = []</span><br><span class="line"><span class="keyword">with</span> open (<span class="string">"./data.json"</span>, <span class="string">"r"</span>, encoding =<span class="string">"utf -8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        J = json.loads(line)</span><br><span class="line">        Movies.append(J)</span><br><span class="line">len(Movies)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">114827</span><br></pre></td></tr></table></figure>

<p>very large and impressive isn’t it?</p>
<p><a href="https://imgchr.com/i/D6u1QU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/28/D6u1QU.png" alt="D6u1QU.png"></a></p>
<p>then the work begins</p>
<hr>
<h3 id="The-program-part"><a href="#The-program-part" class="headerlink" title="The program part"></a>The program part</h3><h4 id="The-proper-way-to-search-for-something-I-want"><a href="#The-proper-way-to-search-for-something-I-want" class="headerlink" title="The proper way to search for something I want"></a>The proper way to search for something I want</h4><p>It is very simple to make a program which have the function of the searching( just uses the loops)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_films</span><span class="params">(key, value)</span>:</span></span><br><span class="line">    films = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,<span class="number">114827</span>):</span><br><span class="line">        <span class="keyword">if</span> key  <span class="keyword">in</span> Movies[i].keys():</span><br><span class="line">            <span class="keyword">if</span> type(Movies[i][key])==str:</span><br><span class="line">                <span class="keyword">if</span> value==Movies[i][key]:</span><br><span class="line">                    films.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> u <span class="keyword">in</span> Movies[i][key]:</span><br><span class="line">                    <span class="keyword">if</span> u==value:</span><br><span class="line">                        films.append(i)</span><br><span class="line">    <span class="keyword">return</span> films</span><br></pre></td></tr></table></figure>

<p>however, we need to take care of the different information or different types of them in order to avoid the situation which is what we are searching is not exist in some lines and the loops will be shut down</p>
<h4 id="The-Graph"><a href="#The-Graph" class="headerlink" title="The Graph"></a>The Graph</h4><p>A graph G=(V,E) is made up with Vertex and Edge, it can describe the relationship with many things like the cast in the Iron Man, we can use the Graph to make the actors connected</p>
<h4 id="The-choices-of-the-movies"><a href="#The-choices-of-the-movies" class="headerlink" title="The choices of the movies"></a>The choices of the movies</h4><p>Using the program that I wrote to choose the movies that I want</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filmschosen=[]</span><br><span class="line">filmschosenreal=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">114827</span>):</span><br><span class="line">    <span class="keyword">if</span>  <span class="string">'companies'</span>  <span class="keyword">in</span> Movies[i].keys():</span><br><span class="line">        <span class="keyword">if</span>  <span class="string">'Iron Man'</span> <span class="keyword">in</span> Movies[i][<span class="string">'title'</span>] :</span><br><span class="line">            filmschosen.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filmschosen:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> Movies[i][<span class="string">'companies'</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Marvel'</span> <span class="keyword">in</span> j:</span><br><span class="line">            filmschosenreal.append(i)</span><br><span class="line">filmschosen = filmschosenreal</span><br><span class="line">print(filmschosen)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[13967, 39592, 39593]</span><br></pre></td></tr></table></figure>

<p>Those are the number of the movies I have chosen(3 of them)</p>
<h4 id="Making-a-graph"><a href="#Making-a-graph" class="headerlink" title="Making a graph"></a>Making a graph</h4><p>create an empty graph</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = nx.Graph()</span><br><span class="line">nx.draw_networkx(G)</span><br></pre></td></tr></table></figure>

<p>the color</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colorconnect = [<span class="string">'#0000FF'</span>,<span class="string">'#228B22'</span>,<span class="string">'#FF4500'</span>]</span><br><span class="line">c=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p> We need to use c to switch the color</p>
<p>Then the loops of drawing the graph</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filmschosen:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> Movies[i][<span class="string">'cast'</span>]:</span><br><span class="line">        G.add_node(n, title=n)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range (len(Movies[i][<span class="string">'cast'</span>])):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range (m+<span class="number">1</span>,len(Movies[i][<span class="string">'cast'</span>])):</span><br><span class="line">            G.add_edge(Movies[i][<span class="string">'cast'</span>][m],Movies[i][<span class="string">'cast'</span>][k] , title= Movies[i][<span class="string">'title'</span>],color=colorconnect[c])</span><br><span class="line">    c = c+<span class="number">1</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">12</span>))</span><br><span class="line">nx.draw_shell(G, with_labels=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><em>Here comes the graph (don’t worry about the color, it won’t appear here)</em></p>
<p><a href="https://imgchr.com/i/D6YUDP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/28/D6YUDP.png" alt="D6YUDP.png"></a></p>
<h4 id="The-core-of-the-casts-in-the-Iron-Man-series"><a href="#The-core-of-the-casts-in-the-Iron-Man-series" class="headerlink" title="The core of the casts in the Iron Man series"></a>The core of the casts in the Iron Man series</h4><p>just use the degree_centrality function</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nx.degree_centrality(G)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;Robert Downey Jr.&#39;: 1.0,</span><br><span class="line"> &#39;Terrence Howard&#39;: 0.26666666666666666,</span><br><span class="line"> &#39;Jeff Bridges&#39;: 0.26666666666666666,</span><br><span class="line"> &#39;Shaun Toub&#39;: 0.26666666666666666,</span><br><span class="line"> &#39;Gwyneth Paltrow&#39;: 1.0,</span><br><span class="line"> &#39;Don Cheadle&#39;: 0.8,</span><br><span class="line"> &#39;Scarlett Johansson&#39;: 0.4,</span><br><span class="line"> &#39;Sam Rockwell&#39;: 0.4,</span><br><span class="line"> &#39;Mickey Rourke&#39;: 0.4,</span><br><span class="line"> &#39;Samuel L. Jackson&#39;: 0.4,</span><br><span class="line"> &#39;Guy Pearce&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Rebecca Hall&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Stéphanie Szostak&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;James Badge Dale&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Jon Favreau&#39;: 0.5333333333333333,</span><br><span class="line"> &#39;Ben Kingsley&#39;: 0.5333333333333333&#125;</span><br></pre></td></tr></table></figure>

<p>Robert Downey Jr. and Gwyneth Paltrow are the cores: they acted in every in the series!</p>
<h4 id="Use-the-pyvis-to-draw-the-relationship-further"><a href="#Use-the-pyvis-to-draw-the-relationship-further" class="headerlink" title="Use the pyvis to draw the relationship further"></a>Use the pyvis to draw the relationship further</h4><p>Pyvis can draw interactive graph with the graph that we have created</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">displayG = Network(width=<span class="number">1024</span>, height=<span class="number">768</span>, notebook = <span class="literal">True</span>,heading=<span class="string">'Iron Man'</span>) </span><br><span class="line">displayG.from_nx(G) </span><br><span class="line">displayG.show(<span class="string">'test.html'</span>)</span><br></pre></td></tr></table></figure>

<p>here is the result!</p>
<p><a href="https://imgchr.com/i/D6dPfS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/28/D6dPfS.png" alt="D6dPfS.png"></a></p>
<p><a href="https://magicruiz.github.io/the%20iron%20man.html" target="_blank" rel="noopener">https://magicruiz.github.io/the%20iron%20man.html</a></p>
<p>you can click and have a look at the interactive graph</p>
<hr>
<h3 id="Finally…"><a href="#Finally…" class="headerlink" title="Finally…"></a>Finally…</h3><p>I made an interactive graph with python at last. However, the content is only about the Iron Man, we can actually use the program to make more graphs about other films. To make it more usable, I will try to do more about the movies in my next post.</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentiment Analysis</title>
    <url>/2020/09/27/Sentiment-Analysis/</url>
    <content><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background:"></a>Background:</h3><p> With the emergence of Internet companies such as Google, Facebook, and Twitter, more and more data accessible online is comprised of text. Textual data and the computational means of processing it and extracting information is also increasingly more important in areas such as business, humanities, social sciences, etc. In this assignment, you will deal with textual analysis.<br>Twitter has become very popular, with many people “tweeting” aspects of their daily lives. This “flow of tweets” has recently become a way to study or guess how people feel about various aspects of the world or their own life. For example, analysis of tweets has been used to try to determine how certain geographical regions may be voting – this is done by analyzing the content, the words, and phrases, in tweets. Similarly, analysis of keywords or phrases in tweets can be used to determine how popular or unpopular a movie might be. This is often referred to as sentiment analysis.</p>
<h3 id="The-program-goes-like-this"><a href="#The-program-goes-like-this" class="headerlink" title="The program goes like this:"></a>The program goes like this:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#read the document</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"keywords"</span>,<span class="string">'r'</span>,encoding=<span class="string">"utf-8"</span>)<span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">keywords = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    keyword,value = line.replace(<span class="string">'\n'</span>,<span class="string">''</span>).split(<span class="string">','</span>)</span><br><span class="line">    keywords[keyword]=int(value)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"tweets"</span>,<span class="string">'r'</span>,encoding=<span class="string">"utf-8"</span>)<span class="keyword">as</span> tws:</span><br><span class="line">    content = tws.readlines()</span><br><span class="line">tweets=content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit the contents</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(tweets)):</span><br><span class="line">    tryb = tweets[i]</span><br><span class="line">    tryb=tryb.replace(<span class="string">'['</span>,<span class="string">''</span>)</span><br><span class="line">    tryb=tryb.replace(<span class="string">']'</span>,<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    listb=tryb.split(<span class="string">' '</span>)</span><br><span class="line">    listb[<span class="number">1</span>]=float(listb[<span class="number">1</span>])</span><br><span class="line">    tweets[i]= listb</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">0</span>,len(tweets)):</span><br><span class="line">    ind = tweets[q]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,len(ind)):</span><br><span class="line">    <span class="keyword">while</span> ind[i]!=<span class="string">''</span> <span class="keyword">and</span> (ind[i][<span class="number">0</span>].isalpha()!=<span class="literal">True</span> <span class="keyword">or</span> ind[i][<span class="number">-1</span>].isalpha()!=<span class="literal">True</span>) :</span><br><span class="line">            <span class="keyword">if</span> ind[i][<span class="number">0</span>].isalpha()!=<span class="literal">True</span>:</span><br><span class="line">                ind[i]=ind[i].strip(ind[i][<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ind[i][<span class="number">-1</span>].isalpha()!=<span class="literal">True</span>:</span><br><span class="line">                ind[i] =ind[i].strip(ind[i][<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> tweets:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,len(ind)):</span><br><span class="line">        ind[i]=ind[i].lower()</span><br><span class="line">finalplaceandvalue=&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#caculate value</span></span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">0</span>,len(tweets)):</span><br><span class="line">    ind = tweets[q]</span><br><span class="line">    num =<span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,len(ind)):</span><br><span class="line">        <span class="keyword">for</span> keywd,keyvalue <span class="keyword">in</span> keywords.items():</span><br><span class="line">            <span class="keyword">if</span> ind[i].find(keywd)!=<span class="number">-1</span>:</span><br><span class="line">                num = num+keyvalue</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ind[<span class="number">1</span>]<span class="keyword">in</span> finalplaceandvalue.keys():</span><br><span class="line">        finalplaceandvalue[ind[<span class="number">1</span>]]=finalplaceandvalue[ind[<span class="number">1</span>]]+num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        finalplaceandvalue.update(&#123;ind[<span class="number">1</span>]:num&#125;)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">#classification and caculation    </span></span><br><span class="line">valid=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line">number=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line">sumofall=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> finalplaceandvalue.items():</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-125.242264</span> <span class="keyword">and</span> k&lt;<span class="number">-115.236428</span>:</span><br><span class="line">        number[<span class="string">'Pacific'</span>] = number[<span class="string">'Pacific'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Pacific'</span>] = valid[<span class="string">'Pacific'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Pacific'</span>]= sumofall[<span class="string">'Pacific'</span>]+v</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-115.236428</span> <span class="keyword">and</span> k&lt;<span class="number">-101.998892</span>:</span><br><span class="line">        number[<span class="string">'Mountain'</span>] = number[<span class="string">'Mountain'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Mountain'</span>] = valid[<span class="string">'Mountain'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Mountain'</span>]= sumofall[<span class="string">'Mountain'</span>]+v</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-101.998892</span> <span class="keyword">and</span> k&lt;<span class="number">-87.518395</span>:</span><br><span class="line">        number[<span class="string">'Central'</span>] = number[<span class="string">'Central'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Central'</span>] = valid[<span class="string">'Central'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Central'</span>]= sumofall[<span class="string">'Central'</span>]+v</span><br><span class="line">    <span class="keyword">if</span> k&gt; <span class="number">-87.518395</span> <span class="keyword">and</span> k&lt;<span class="number">-67.44574</span>:</span><br><span class="line">        number[<span class="string">'Eastern'</span>] = number[<span class="string">'Eastern'</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v &gt;<span class="number">0</span>:</span><br><span class="line">            valid[<span class="string">'Eastern'</span>] = valid[<span class="string">'Eastern'</span>]+<span class="number">1</span></span><br><span class="line">        sumofall[<span class="string">'Eastern'</span>]= sumofall[<span class="string">'Eastern'</span>]+v</span><br><span class="line">average=&#123;<span class="string">'Eastern'</span>:<span class="number">0</span>,<span class="string">'Central'</span>:<span class="number">0</span>,<span class="string">'Mountain'</span>:<span class="number">0</span>,<span class="string">'Pacific'</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> sumofall.items():</span><br><span class="line">    average[k]=v/number[k]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#tuples output</span></span><br><span class="line">Eastern = (average[<span class="string">'Eastern'</span>],valid[<span class="string">'Eastern'</span>],number[<span class="string">'Eastern'</span>])</span><br><span class="line">Central=(average[<span class="string">'Central'</span>],valid[<span class="string">'Central'</span>],number[<span class="string">'Central'</span>])</span><br><span class="line">Mountain=(average[<span class="string">'Mountain'</span>],valid[<span class="string">'Mountain'</span>],number[<span class="string">'Mountain'</span>])</span><br><span class="line">Pacific=(average[<span class="string">'Pacific'</span>],valid[<span class="string">'Pacific'</span>],number[<span class="string">'Pacific'</span>])</span><br><span class="line">print( Eastern)</span><br><span class="line">print(Central)</span><br><span class="line">print(Mountain)</span><br><span class="line">print(Pacific)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(4.667894413750767, 806, 1629)</span><br><span class="line">(4.800813008130081, 380, 738)</span><br><span class="line">(8.669491525423728, 68, 118)</span><br><span class="line">(5.376021798365122, 197, 367)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>the monkeys and their king</title>
    <url>/2020/08/06/c-the-monkeys-and-their-king/</url>
    <content><![CDATA[<p>The story is like this, a group of monkey decide to select a king from them, they had a rule for the selection:</p>
<p> <em>let the monkeys sit in a circle and give them a number which is from 1 to 3 separately, if a monkey gets a number 3, the monkey must quit and the rest of the monkeys continue having the game till there is only one monkey left, the monkey left is the king of the monkeys.</em></p>
<p>I need to write a program which can give a prediction according to the number of monkeys in the game which is entered.  </p>
<hr>
<p>The rules is simple but not so easy, the circle problem is the difficulty.</p>
<p>To make number in a circle, I need to have a automatic system which can make the next number of the largest number be the first number, just like this:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i = i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>( i==num)</span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">0</span>;	</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>I need to change the number given to the monkeys every time according to the order, also, the number should be like this: ‘1,2,3,1,2,3’ (however I made the 3 to be 0).</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add = add+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(add ==<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				add = <span class="number">0</span>;</span><br><span class="line">				remain = remain<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<p>After that it is no a big deal.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> add=<span class="number">0</span>,i=<span class="number">-1</span>,num=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">	<span class="keyword">int</span> mark[num];</span><br><span class="line">	<span class="keyword">int</span> remain = num;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mark[i]=<span class="number">123</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	i = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(remain&gt;<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		i = i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>( i==num)</span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">0</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mark[i]!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			add = add+<span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(add ==<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				add = <span class="number">0</span>;</span><br><span class="line">				remain = remain<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mark[i]=add;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (mark[i]!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>,(i+<span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/08/06/a2bDKJ.png" alt="a2bDKJ.png"></p>
<p>Done!</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>the diamond creating</title>
    <url>/2020/08/02/c-the-diamond/</url>
    <content><![CDATA[<p>These days I am learning the C programming language, which is the brand new topic for me. The C programming language is the further exploration.</p>
<p>The first thing that I want to tell is about some interesting tasks, but I will start with one that I did before with python, which is the diamond generating.</p>
<hr>
<p>This is the thing that I did with python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=int(input())</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">2</span>,int((x+<span class="number">1</span>)/<span class="number">2</span>)+<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (int((x<span class="number">-1</span>)/<span class="number">2</span>),<span class="number">1</span>,<span class="number">-1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">     *     </span><br><span class="line">    * *    </span><br><span class="line">   *   *   </span><br><span class="line">  *     *  </span><br><span class="line"> *       * </span><br><span class="line">*         *</span><br><span class="line"> *       * </span><br><span class="line">  *     *  </span><br><span class="line">   *   *   </span><br><span class="line">    * *    </span><br><span class="line">     *</span><br></pre></td></tr></table></figure>

<hr>
<p>So now I need to do the same thing with C.</p>
<p>(by the way I am using the DEV cpp)</p>
<p>This is the diamond  program without the hollow:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,nb,m,i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"please give me the size of the diamond"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n/<span class="number">2</span>+<span class="number">1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(m = <span class="number">0</span> ;m&lt;=(n/<span class="number">2</span>+<span class="number">1</span>-i);m++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(nb = <span class="number">1</span>;nb&lt;=i*<span class="number">2</span>+<span class="number">1</span>;nb++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i =n/<span class="number">2</span><span class="number">-1</span> ;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(m = <span class="number">0</span> ;m&lt;=(n/<span class="number">2</span>+<span class="number">1</span>-i);m++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(nb = <span class="number">1</span>;nb&lt;=i*<span class="number">2</span>+<span class="number">1</span>;nb++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This diamond program created a diamond with more ‘  ‘, just like this:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aJtGnS.png" alt="aJtGnS.png"></p>
<p>But I think that is ok because the overall method is the same.</p>
<hr>
<p>When it comes to the hollow one, things are more difficult.</p>
<p>I need to give the hollow part by removing the ‘*’ in the middle part.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,nb,m,i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"please give me the size of the diamond "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(m = <span class="number">0</span>;m&lt;n/<span class="number">2</span>;m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">	<span class="keyword">for</span> (m = <span class="number">2</span>;m&lt;=n/<span class="number">2</span>+<span class="number">1</span>;m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = n/<span class="number">2</span>+<span class="number">1</span>-m;i&gt;=<span class="number">1</span>;i-- )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">		<span class="keyword">for</span>(i = (m<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (m =n/<span class="number">2</span> ;m&gt;=<span class="number">2</span>;m--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = n/<span class="number">2</span>+<span class="number">1</span>-m;i&gt;=<span class="number">1</span>;i-- )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">		<span class="keyword">for</span>(i = (m<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(m = <span class="number">0</span>;m&lt;n/<span class="number">2</span>;m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Because the first and the last line of the diamond is special: only one ‘*’ is printed.</p>
<p>This is the result:</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aJDITf.png" alt="aJDITf.png"></p>
<p>Just like the python.</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Giving the Fibonacci Sequence and the callnum() creation</title>
    <url>/2020/07/13/Python6/</url>
    <content><![CDATA[<p>I got a question that asked me to give the last number and the sum of all the numbers in the Fibonacci Sequence(the length of it is asked to be entered by the user).</p>
<hr>
<p>Here is the answer I have:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = input()</span><br><span class="line">fb = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> len(fb)!=int(n):</span><br><span class="line">    </span><br><span class="line">    fb.append(fb[<span class="number">-1</span>]+fb [<span class="number">-2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(fb)):</span><br><span class="line">    total = total + fb[i<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(fb)   </span><br><span class="line">print(<span class="string">'This is the '</span>+str(n)+callnum(n)+<span class="string">' number: '</span>,fb[<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'This is the sum of the sequence till the '</span>+str(n)+callnum(n)+<span class="string">' number: '</span>,total)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">[1, 1, 2, 3, 5, 8, 13, 21]</span><br><span class="line">This is the 8th number:  21</span><br><span class="line">This is the sum of the sequence till the 8th number:  54</span><br></pre></td></tr></table></figure>

<hr>
<p>It is worth mentioning that there is a function called ‘callnum()’ , it is the new function I created to give the ordinal number, it is very  simple:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callnum</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> str(i)[<span class="number">-1</span>]==<span class="string">'1'</span>:</span><br><span class="line">        call = <span class="string">'st'</span></span><br><span class="line">    <span class="keyword">elif</span> str(i)[<span class="number">-1</span>]==<span class="string">'2'</span>:</span><br><span class="line">        call = <span class="string">'nd'</span></span><br><span class="line">    <span class="keyword">elif</span> str(i)[<span class="number">-1</span>]==<span class="string">'3'</span>:</span><br><span class="line">        call=<span class="string">'rd'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        call= <span class="string">'th'</span></span><br><span class="line">    <span class="keyword">return</span> call</span><br></pre></td></tr></table></figure>

<p>Actually it is from one question that I was given, after giving the answer, I decided to have a easier way to use this function, so I defined it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set2= &#123;<span class="string">'1'</span>: <span class="number">31</span>,<span class="string">'2'</span>:<span class="number">29</span>,<span class="string">'3'</span>:<span class="number">31</span>,<span class="string">'4'</span>:<span class="number">30</span>,<span class="string">'5'</span>:<span class="number">31</span>,<span class="string">'6'</span>:<span class="number">30</span>,<span class="string">'7'</span>:<span class="number">31</span>,<span class="string">'8'</span>:<span class="number">31</span>,<span class="string">'9'</span>:<span class="number">30</span>,<span class="string">'10'</span>:<span class="number">31</span>,<span class="string">'11'</span>:<span class="number">30</span>,<span class="string">'12'</span>:<span class="number">31</span>&#125;</span><br><span class="line">set1=&#123;<span class="string">'1'</span>: <span class="number">31</span>,<span class="string">'2'</span>:<span class="number">28</span>,<span class="string">'3'</span>:<span class="number">31</span>,<span class="string">'4'</span>:<span class="number">30</span>,<span class="string">'5'</span>:<span class="number">31</span>,<span class="string">'6'</span>:<span class="number">30</span>,<span class="string">'7'</span>:<span class="number">31</span>,<span class="string">'8'</span>:<span class="number">31</span>,<span class="string">'9'</span>:<span class="number">30</span>,<span class="string">'10'</span>:<span class="number">31</span>,<span class="string">'11'</span>:<span class="number">30</span>,<span class="string">'12'</span>:<span class="number">31</span>&#125;</span><br><span class="line">n,y,r=eval(input(<span class="string">'please enter the date   '</span>).replace(<span class="string">'.'</span>,<span class="string">','</span>))</span><br><span class="line">total =<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n%<span class="number">4</span> ==<span class="number">0</span>:</span><br><span class="line">    RSet= set2</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">100</span>==<span class="number">0</span>:</span><br><span class="line">        RSet = set1</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">400</span>==<span class="number">0</span>:</span><br><span class="line">            RSet = set2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    RSet = set1</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> RSet.items():</span><br><span class="line">    <span class="keyword">if</span> int(i) &lt;y:</span><br><span class="line">        total = total + k </span><br><span class="line">total = total +r</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> str(total)[len(str(total))<span class="number">-1</span>]==<span class="string">'1'</span>:</span><br><span class="line">    call = <span class="string">'st'</span></span><br><span class="line"><span class="keyword">elif</span> str(total)[len(str(total))<span class="number">-1</span>]==<span class="string">'2'</span>:</span><br><span class="line">    call = <span class="string">'nd'</span></span><br><span class="line"><span class="keyword">elif</span> str(total)[len(str(total))<span class="number">-1</span>]==<span class="string">'3'</span>:</span><br><span class="line">    call=<span class="string">'rd'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    call= <span class="string">'th'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'This day is the %d'</span>%(total)+ call+<span class="string">' day in the year.'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">please enter the date   2020.7.11</span><br><span class="line">This day is the 193rd day in the year.</span><br></pre></td></tr></table></figure>

<p>This is the origin of the callnum() function, which is also very interesting. It can give the number of days depended on the date entered.</p>
<hr>
<p><strong>Considering that it is so easy to use a defined function,I will give more of them in the future and put them on the following posts.</strong></p>
<p><em>By the way after a few days I will learn to get information from the web and use it to get some data from a website.</em></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Playing Board Games(Dictionary and daily looping statements)</title>
    <url>/2020/06/23/Python5/</url>
    <content><![CDATA[<p>There is a small game that can be made in python, which is the Tic Tac Toe. </p>
<p>Actually I haven’t learnt the rules of that now, but it is still interesting in terms of codes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theBoard = &#123;<span class="string">'top-L'</span>:<span class="string">' '</span>,<span class="string">'top-M'</span>:<span class="string">' '</span>,<span class="string">'top-R'</span>:<span class="string">' '</span>,</span><br><span class="line">           <span class="string">'mid-L'</span>:<span class="string">' '</span>,<span class="string">'mid-M'</span>:<span class="string">' '</span>,<span class="string">'mid-R'</span>:<span class="string">' '</span>,</span><br><span class="line">           <span class="string">'low-L'</span>:<span class="string">' '</span>,<span class="string">'low-M'</span>:<span class="string">' '</span>,<span class="string">'low-R'</span>:<span class="string">' '</span>,&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBoard</span><span class="params">(board)</span>:</span></span><br><span class="line">    print(board[<span class="string">'top-L'</span>]+<span class="string">'|'</span>+board[<span class="string">'top-M'</span>]+<span class="string">'|'</span>+board[<span class="string">'top-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'mid-L'</span>]+<span class="string">'|'</span>+board[<span class="string">'mid-M'</span>]+<span class="string">'|'</span>+board[<span class="string">'mid-R'</span>])</span><br><span class="line">    print(<span class="string">'-+-+-'</span>)</span><br><span class="line">    print(board[<span class="string">'low-L'</span>]+<span class="string">'|'</span>+board[<span class="string">'low-M'</span>]+<span class="string">'|'</span>+board[<span class="string">'low-R'</span>])</span><br><span class="line">    </span><br><span class="line">turn=<span class="string">'X'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    printBoard(theBoard)</span><br><span class="line">    print(<span class="string">'Turn for '</span>+turn+<span class="string">'. Move on which space?'</span>)</span><br><span class="line">    move = input()</span><br><span class="line">    theBoard[move]=turn</span><br><span class="line">    <span class="keyword">if</span> turn ==<span class="string">'X'</span>:</span><br><span class="line">        turn=<span class="string">'O'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turn=<span class="string">'X'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> | | </span><br><span class="line">Turn for X. Move on which space?</span><br><span class="line">mid-M</span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> |X| </span><br><span class="line">-+-+-</span><br><span class="line"> | | </span><br><span class="line">Turn for O. Move on which space?</span><br><span class="line">low-M</span><br><span class="line"> | | </span><br><span class="line">-+-+-</span><br><span class="line"> |X| </span><br><span class="line">-+-+-</span><br><span class="line"> |O| </span><br><span class="line">Turn for X. Move on which space?</span><br><span class="line">#(for 9 times.)</span><br></pre></td></tr></table></figure>

<p>This is not the full code for the Tic Tac Toe because there aren’t rules in the code, so the function of the code is just about showing the moves of the two players.</p>
<p><em>But there are some problems in the code: It is not automatic enough.</em></p>
<hr>
<p>However, in this small chessboard(3*3) it is nearly identical if we choose to use many cyber looping statements instead of the simple print method because there are only 9 values needed to be put on the chessboard. </p>
<p>So I decide to make the chessboard larger to 8*8, I suppose the new chessboard can be used to play some other games.</p>
<p>The positions of the ‘X’ and the ‘O’ are not very wisely represented (low/mid/top + L/M/R) so I decided to give a better way to express it, which was the letter + number, the letter gave the role and the number gave the line. (e.g A2)</p>
<p>Also the way of creating the dictionary should be changed, the typing is no longer useful because there are too many of them, so I decide to use a looping statement here.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">        theKos.setdefault(str(m)+str(i),<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>

<p>There must be a way to show the chessboard, the letters and numbers should be added because it is a very hard thing to read the chessboard without them. The looping statements should also be used because the original edition is typed directly. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">' A B C D E F G H'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    print(str(i),end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">        print(theKos[m+str(i)],end=<span class="string">'|'</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">' '</span>+<span class="string">'-+'</span>*<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>The result came out to be:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> A B C D E F G H</span><br><span class="line">1 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">2 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">3 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">4 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">5 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">6 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">7 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br><span class="line">8 | | | | | | | |</span><br><span class="line"> -+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>

<p><em>Not bad, isn’t it?</em></p>
<p>The following part was much easier, besides the change in data, I also made it able to stop by just press the enter because there were so many moves that we have the need to stop the game before all the moves are used up.</p>
<p>The final work:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theKos=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Kosprint</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">            theKos.setdefault(str(m)+str(i),<span class="string">' '</span>)</span><br><span class="line">    print(<span class="string">'  A B C D E F G H'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        print(str(i)+<span class="string">' '</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> list(<span class="string">'ABCDEFGH'</span>):</span><br><span class="line">            print(theKos[m+str(i)],end=<span class="string">'|'</span>)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'  '</span>+<span class="string">'-+'</span>*<span class="number">8</span>)</span><br><span class="line">turn=<span class="string">'X'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">    Kosprint()</span><br><span class="line">    print(<span class="string">'Turn for '</span>+turn+<span class="string">'. Move on which space?'</span>)</span><br><span class="line">    move = input()</span><br><span class="line">    theKos[move]=turn</span><br><span class="line">    <span class="keyword">if</span> turn ==<span class="string">'X'</span>:</span><br><span class="line">        turn=<span class="string">'O'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turn=<span class="string">'X'</span></span><br><span class="line">    <span class="keyword">if</span> move==<span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  A B C D E F G H</span><br><span class="line">1  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">2  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">3  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">4  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">5  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">6  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">7  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">8  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">Turn for X. Move on which space?</span><br><span class="line">A2</span><br><span class="line">  A B C D E F G H</span><br><span class="line">1  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">2 X| | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">3  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">4  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">5  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">6  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">7  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">8  | | | | | | | |</span><br><span class="line">  -+-+-+-+-+-+-+-+</span><br><span class="line">Turn for O. Move on which space?</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>The looping really worked, happily.</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>The &#39;%&#39; and some print skills</title>
    <url>/2020/06/18/Python4/</url>
    <content><![CDATA[<p>I tried to print the multiplication table with python, but soon I found that there is a problem with the “end=’ ‘ “. Every time I always found that the contents that should be in the next line would go to the pervious line, which means I cannot end the order.</p>
<p>However, I found that the problem can be solved by an extra space printed：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(i,<span class="string">'*'</span>,j,<span class="string">'='</span>,i*j,end=<span class="string">' '</span>)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure>



<p>The solution was simple but not so easy to find.</p>
<hr>
<p>There was also an very interesting thing that I found when I was trying to find some method for me to print the multiplication table.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,x+<span class="number">1</span>):</span><br><span class="line">        print( <span class="string">"%d*%d=%2d\t"</span> %(y,x,x*y),end=<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1*1&#x3D; 1	</span><br><span class="line">1*2&#x3D; 2	2*2&#x3D; 4	</span><br><span class="line">1*3&#x3D; 3	2*3&#x3D; 6	3*3&#x3D; 9	</span><br><span class="line">1*4&#x3D; 4	2*4&#x3D; 8	3*4&#x3D;12	4*4&#x3D;16	</span><br><span class="line">1*5&#x3D; 5	2*5&#x3D;10	3*5&#x3D;15	4*5&#x3D;20	5*5&#x3D;25	</span><br><span class="line">1*6&#x3D; 6	2*6&#x3D;12	3*6&#x3D;18	4*6&#x3D;24	5*6&#x3D;30	6*6&#x3D;36	</span><br><span class="line">1*7&#x3D; 7	2*7&#x3D;14	3*7&#x3D;21	4*7&#x3D;28	5*7&#x3D;35	6*7&#x3D;42	7*7&#x3D;49	</span><br><span class="line">1*8&#x3D; 8	2*8&#x3D;16	3*8&#x3D;24	4*8&#x3D;32	5*8&#x3D;40	6*8&#x3D;48	7*8&#x3D;56	8*8&#x3D;64	</span><br><span class="line">1*9&#x3D; 9	2*9&#x3D;18	3*9&#x3D;27	4*9&#x3D;36	5*9&#x3D;45	6*9&#x3D;54	7*9&#x3D;63	8*9&#x3D;72	9*9&#x3D;81</span><br></pre></td></tr></table></figure>



<p>The ‘%’ work as a normal variable with one character,all the contents are explained at last (<em>%(y,x,x*y)</em>)</p>
<p>The method is suitable for some complicated print missions that we have the need to put everything after them.</p>
<hr>
<p><em>So…</em></p>
<p><em>Is this method very useful?</em></p>
<p><em>maybe</em></p>
<p>I will try to use this method if some questions will need it. <em>Let’s go and see!</em></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hollow Diamond and Pascal Triangle(The importance of encapsulation)</title>
    <url>/2020/06/17/Python3/</url>
    <content><![CDATA[<p>Lately I am trying to do some works about the programming questions that was initially set for visual basic learners (I chose the economic lesson instead of the computer science so I learn nothing about visual basic ). The only difference that I had with the VB learners was that I was using the Python.</p>
<hr>
<p><strong>The first question asked us to print a hollow diamond</strong></p>
<p>I divided the diamond into 2 parts: the top and bottom line and the regular lines (which are the middle lines)</p>
<p>I do so because the first and last lines are very special with only one character printed, so the formula will be different.</p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZlgaT.png" alt="NZlgaT.png"></p>
<p>With the uses of  ‘for i in range’ , the task was completed.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=int(input())</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">2</span>,int((x+<span class="number">1</span>)/<span class="number">2</span>)+<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (int((x<span class="number">-1</span>)/<span class="number">2</span>),<span class="number">1</span>,<span class="number">-1</span>):</span><br><span class="line">    print(<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i)+<span class="string">'*'</span>+<span class="string">' '</span>*int((i<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">1</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x+<span class="number">1</span>)/<span class="number">2</span>-i))</span><br><span class="line">print(<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>)+<span class="string">'*'</span>+<span class="string">' '</span>*int((x<span class="number">-1</span>)/<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">     *     </span><br><span class="line">    * *    </span><br><span class="line">   *   *   </span><br><span class="line">  *     *  </span><br><span class="line"> *       * </span><br><span class="line">*         *</span><br><span class="line"> *       * </span><br><span class="line">  *     *  </span><br><span class="line">   *   *   </span><br><span class="line">    * *    </span><br><span class="line">     *</span><br></pre></td></tr></table></figure>

<p>The process really took me a long period of time, I soon realized the problem can be solved by the ‘def’ because many tough formula can be put in it.</p>
<hr>
<p>*<em>The second question asked us to print a pascal triangle *</em></p>
<p>In this question, the ‘def’ helped a lot because I didn’t know the direct order about the factorial and the combination, so I made them. (JC means the Chinese character of factorial)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">JC</span><span class="params">(x)</span>:</span></span><br><span class="line">    y=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,x+<span class="number">1</span>):</span><br><span class="line">        y=y*i </span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">C</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    final= int(JC(x)/(JC(x-y)*JC(y)))</span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>

<p>After that the problem concentrated on the space I needed to give for the triangle because the shape of it was special and between the lines the numbers went like this:</p>
<p><img src="https://s1.ax1x.com/2020/06/17/NZ3yNT.png" alt="NZ3yNT.png"></p>
<p>I soon found that there was a rule so the problem was easy.</p>
<p>Then I need to use two loop structures(‘for i in range’) for each line and the contents in it respectively.</p>
<p>Here is the final work:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">H= int(input())</span><br><span class="line">print(<span class="string">' '</span>*H+<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,H+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">' '</span>*(H-i),end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range (i,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        print(C(i,x),end=<span class="string">' '</span>)</span><br><span class="line">        print(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">     1</span><br><span class="line">   1 2 1</span><br><span class="line">  1 3 3 1</span><br><span class="line"> 1 4 6 4 1</span><br><span class="line">1 5 10 10 5 1</span><br></pre></td></tr></table></figure>

<p>The whole process was easier than the first one because I use the ‘def’ to make the formula easier with the numbers input only. </p>
<hr>
<p><em>The encapsulation made the whole process easier to be created and easier to read.</em></p>
<p>This is what I got from this case, before doing the encapsulations the formula in the brackets really bothered me, I will try the method from now on.</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Processing Problems(something about eval)</title>
    <url>/2020/05/25/Python2/</url>
    <content><![CDATA[<p>​        <strong>The story started when a problem like this is sent to me.</strong></p>
<p><a href="https://imgtu.com/i/6deQ7n" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/13/6deQ7n.png" alt="6deQ7n.png"></a></p>
<hr>
<p>Actually it was relatively simple for me, but soon I found there were something that brought me some questions:<br><img src="https://s1.ax1x.com/2020/05/25/tCJKuq.png" alt="tCJKuq.png"></p>
<p>The question asked me to make the function be exactly the same with the example, the input of data must be completed in a pair of brackets with all data in it , which meant I need to work out a way to make the data separated by some special methods that I have never learnt before, I could only make a function like this at first, which was not that perfect:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'your principal'</span>)</span><br><span class="line">P = float(input())</span><br><span class="line">print(<span class="string">'What about the annual interest rate?'</span>)</span><br><span class="line">rr= float(input())</span><br><span class="line">print(<span class="string">'what about the duration?'</span>)</span><br><span class="line">nn= float(input())</span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line">r=rr/<span class="number">12</span>/<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> r ==<span class="number">0</span>:</span><br><span class="line">    MP=P/n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    MP= P * (r*(<span class="number">1</span>+r)**n)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(MP)</span><br></pre></td></tr></table></figure>

<hr>
<p>To solve the brackets problem, I found some information about the way to separate data with a single function nicely, but unfortunately, I failed to find one, because the description about the function was not clear enough or the function never exists.</p>
<p><em>what about changing a way of thinking?</em></p>
<p>I found that the input of data can be separated from the beginning, which meant the separation of the data will be done already. Once again I searched the function with similar effect. I found it : <em>eval</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OneHaha,TwoHaha=eval(input())</span><br><span class="line">print(OneHaha)</span><br><span class="line">print(TwoHaha)</span><br></pre></td></tr></table></figure>

<p>Once I put   <em>1,2</em>   in the function, the value 1 is given to OneHaha, the value 2 is given to TwoHaha. (Nicely!!!)</p>
<p>So the function turned to this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ohhhhhhhhhhhhh</span></span><br><span class="line">P,rr,nn=eval(str(input(<span class="string">'('</span>+<span class="string">'principal, annual_interest_rate, duration '</span>+<span class="string">')'</span>).strip(<span class="string">'()'</span>)))</span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line">r=rr/<span class="number">12</span>/<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> r ==<span class="number">0</span>:</span><br><span class="line">    MP=P/n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    MP= P * (r*(<span class="number">1</span>+r)**n)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(MP)</span><br></pre></td></tr></table></figure>

<p>(By the way, I used a strip , which could remove the brackets of the input, to make this, I need to turn the input to be exactly the string, so that the strip could deal with its string.)</p>
<hr>
<p>The similar things happened when I was trying to solve the part2: Calculate the remaining balance of a loan.</p>
<p>This is the initial work(old way of input):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'principal?'</span>)</span><br><span class="line">P= float(input())</span><br><span class="line">print( <span class="string">"annual interest rate?"</span>)</span><br><span class="line">rr=float(input())</span><br><span class="line">print(<span class="string">'duration?'</span>)</span><br><span class="line">nn=float(input())</span><br><span class="line">print(<span class="string">'number of payments?'</span>)</span><br><span class="line">np=float(input())</span><br><span class="line">r=(rr/<span class="number">100</span>)/<span class="number">12</span></span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rr==<span class="number">0</span>:</span><br><span class="line">    RLB=P*(<span class="number">1</span>-np/n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    RLB=P*((<span class="number">1</span>+r)**n-(<span class="number">1</span>+r)**np)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(RLB)</span><br></pre></td></tr></table></figure>

<p>Then it turned to this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ohhhhhhhhhhhhh</span></span><br><span class="line">P,rr,nn,np=eval(str(input(<span class="string">'('</span>+<span class="string">'principal, annual_interest_rate, duration , number_of_payments'</span>+<span class="string">')'</span>).strip(<span class="string">'()'</span>)))</span><br><span class="line">P=float(P)</span><br><span class="line">rr=float(rr)</span><br><span class="line">nn=float(nn)</span><br><span class="line">np=float(np)</span><br><span class="line">r=(rr/<span class="number">100</span>)/<span class="number">12</span></span><br><span class="line">n=nn*<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rr==<span class="number">0</span>:</span><br><span class="line">    RLB=P*(<span class="number">1</span>-np/n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    RLB=P*((<span class="number">1</span>+r)**n-(<span class="number">1</span>+r)**np)/((<span class="number">1</span>+r)**n<span class="number">-1</span>)</span><br><span class="line">print(RLB)</span><br></pre></td></tr></table></figure>

<p>Amazing isn’t it?</p>
<p>With the experience in part1 and part2, part3 seemed very simple.</p>
<p>Actually,  <strong>it is simple</strong>.<img src="https://s1.ax1x.com/2020/05/25/tCwnFP.png" alt="tCwnFP.png"></p>
<hr>
<p>I also asked my classmates to provide some extra methods that worked like the <em>eval</em>.</p>
<p><em>Here it is:</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t= list(input())</span><br><span class="line">t= (<span class="string">''</span>.join(t[<span class="number">1</span>:<span class="number">-1</span>])).split(<span class="string">','</span>)</span><br><span class="line">p= float (t[<span class="number">0</span>])</span><br><span class="line">r= float (t[<span class="number">1</span>])</span><br><span class="line">n= float (t[<span class="number">2</span>])</span><br><span class="line">print(p)</span><br><span class="line">print(r)</span><br><span class="line">print(n)</span><br></pre></td></tr></table></figure>

<p>(Method provided by Arya, thanks!)</p>
<hr>
<p>I haven’t learnt the function <em>eval</em> yet, so up to now I can only use it in the way I provided above only, I will learn all about this function in the future!</p>
<p><strong><em>GOOD LUCK, Ruiz!</em></strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Origin of Python</title>
    <url>/2020/05/03/Python1/</url>
    <content><![CDATA[<h2 id="Where-we-started"><a href="#Where-we-started" class="headerlink" title="Where we started"></a>Where we started</h2><p>This is my first time to use python, which is a lovely experience.  </p>
<p>Simple but vital :</p>
<p>​    <a href="https://imgtu.com/i/6dZoy4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/13/6dZoy4.png" alt="6dZoy4.png"></a></p>
<p><strong>KEEP IT UP!</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>My biggest academic achievement</title>
    <url>/2020/05/01/My-biggest-academic-achievement/</url>
    <content><![CDATA[<h1 id="My-Biggest-Academic-Achievement"><a href="#My-Biggest-Academic-Achievement" class="headerlink" title="My Biggest Academic Achievement"></a>My Biggest Academic Achievement</h1><p>​                As a 16-year-old boy, studying takes up a large proportion of my time, I have achieved lot academically as a student, but my biggest academic achievement was my success in the senior school entrance test.</p>
<p>​                The test took me a lot of time to prepare for last year. All my peers were working very hard on it. It was all about reviewing. The test was mainly on what we had learnt in junior high, a part of the test was even on primary school work, so the range of information was quite time-consuming us to revise. Moreover, there was a huge competition among us: there were 52000 students in Nanjing taking the test to get the chance to study further. </p>
<p>​                The preparation started in the last 2 terms of junior high: We finished learning all of the junior high coursework , which was one and a half terms ahead of the official plan, this allowed us to get a full term for exam preparation. We all made a plan for ourselves according to our ability. An aim was also necessary. My initial plan was to get into the best school in Nanjing. Despite my failure to achieve my objective,my goal gave me a lot of motivation when I nearly gave up. To help us get a better grade our teachers gave us a lot of homework, which was mainly past papers many places around Nanjing or from Nanjing. These papers really worked well because the contents were quite similar to the actual papers. However, we were given a lot of papers so we were exhausted every day. </p>
<p>​                When preparing for the test got too hard some of the students gave up working for the exam, which meant that they went to a relatively bad school. I was the top student in my class, which meant my teacher had great expectations of me, and which put a lot of pressure on me, I started think about the results of the examination, which was the greatest burden on me at that time. After the whole preparation stage, I finished the examination in a few days.</p>
<p>​                The results came out after 3 weeks. Personally speaking, the result I got didn’t meet my expectation and it was not a good one. Among my classmates, I was not even in the top place . Despite all of these problems with my final result, this is my greatest achievement, because the exam was the largest one that I have ever sat. In addition, my grade was relatively good within the group of 52000 students, which meant that I got to go a good senior high school. The achievement could represent my 9-years of-study, and it was good after all.</p>
<p>​                In conclusion, the achievement gave me a new start to my studying career, it was not a bad start and I do believe that I can do better than my peers . I must say that my teachers and parents gave me a lot of support, which helped me get a better grade . I do believe that I will meet their expectations of me next time.</p>
]]></content>
  </entry>
  <entry>
    <title>Player with magic, Cards with dragon</title>
    <url>/2020/04/24/card2/</url>
    <content><![CDATA[<p>After a few weeks’ practice, I think i can increase the cost on this hobby, hopefully I can interact with players from different countries when I start my university life!</p>
<hr>
<p>oh, by the way</p>
<h2 id="new-cards-DRAGON"><a href="#new-cards-DRAGON" class="headerlink" title="__new cards, DRAGON! __"></a>__new cards, DRAGON! __</h2><p><a href="https://imgchr.com/i/J0Cl11" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/23/J0Cl11.jpg" alt="J0Cl11.jpg"></a></p>
<p><a href="https://imgchr.com/i/J0C16x" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/23/J0C16x.jpg" alt="J0C16x.jpg"></a></p>
]]></content>
      <tags>
        <tag>magicRuizwithhiscards</tag>
      </tags>
  </entry>
  <entry>
    <title>First try</title>
    <url>/2020/04/08/card1/</url>
    <content><![CDATA[<p>Genesis of Cardistry!!!</p>
<p><a href="https://imgchr.com/i/GRmJHA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmJHA.jpg" alt="GRmJHA.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRm1je" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRm1je.jpg" alt="GRm1je.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRm8nH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRm8nH.jpg" alt="GRm8nH.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRmGBd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmGBd.jpg" alt="GRmGBd.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRmNNt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmNNt.jpg" alt="GRmNNt.jpg"></a></p>
<p><a href="https://imgchr.com/i/GRmtAI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GRmtAI.jpg" alt="GRmtAI.jpg"></a></p>
]]></content>
      <tags>
        <tag>magicRuizwithhiscards</tag>
      </tags>
  </entry>
  <entry>
    <title>Difference I found in A-Level center</title>
    <url>/2020/04/02/study-1/</url>
    <content><![CDATA[<p>I chose a quite different way with my initial classmates, which is the international education, for the following 3 years, I will make preparation for my university study in other countries. I really took a lot of time to get used to it , here are the differences I found between the study experience of me in international education and in the traditional education in China.</p>
<h2 id="About-the-teachers"><a href="#About-the-teachers" class="headerlink" title="About the teachers"></a>About the teachers</h2><p>The first lesson I took in the A-Level center is presented by a foreign teacher, whose accent was quite difficult for us to understand, after looking at the contents on the blackboard, I could get 50 percent of the points he taught, which was quite difficult for me at first. We all felt quite disappointed about the teachers in the center because we thought there might be many English teacher with good pronunciations. As one of the best English learner among us, I understood the meaning of our teachers faster than others, I found the teachers were really experienced and patient, they were all willing to help us one by one if we need,  which was a hard thing for the traditional Chinese teachers, that was because Chinese teachers were used to facing a  large amount of students at a time, some of the Chinese teachers would only tell things once so that some students could not get the points well, which was a difficult for me before. Teachers were also willing to have more communication with us , which really helped a lot with our speaking test. </p>
<h2 id="About-my-friends"><a href="#About-my-friends" class="headerlink" title="About my friends"></a>About my friends</h2><p>My classmates were quite different, after having the idea to study further in a foreign university, they were more likely to act as a international student, taking my friend Horan as an example, I found he even changed the language of his phone’s system after getting into the international lessons, I also changed my habit , I started to listen to BBC news instead of the Chinese radios, my friends gave me the idea about how to get used to the English environment. Edison from AS also gave me some help, once he took me to the teachers’ office to talk to our teachers for fun, I started to talk to my new teachers in English from then on with him, I do believe that this can make it much easier to know my teachers well if I keep talking to my teachers in English. This didn’t happen before, I didn’t talk much even with Chinese teachers. My friends really changed me a lot.</p>
<h2 id="About-the-learning-rhythm"><a href="#About-the-learning-rhythm" class="headerlink" title="About the learning rhythm"></a>About the learning rhythm</h2><p>After a quater of the study, it was the time for us to have a monthly exam, I was really surprised when I got to know there would be no revision class for our monthly test. I usually had a week for revision before the monthly test when I was in my junior high, which made most of my classmates only study in those specific weeks massively. Luckily, I did a good job in the beginning of the term in A-Level center, so I didn’t worry about the monthly test very much, simple work for revision after school was enough for me to get a high mark in the exams, from then, I started to realize the importance of the works between the monthly exams, so I worked harder on it than before. Many teachers of me told me that it was the right learning rhythm, but I think the habit was very hard to form when I was taking the traditional education because teachers before usually made the study process very short and give us a lot of time to review the contents, which made me very confused when reviewing. I think the IGCSE lesson we took didn’t have such a problem because we get the knowledge step by step, and the book for us was detailed so we can get all the points, I believe that I can learn better without getting confused and also form a better study habit than before.</p>
]]></content>
      <tags>
        <tag>studyingRuiz</tag>
      </tags>
  </entry>
  <entry>
    <title>vedio test</title>
    <url>/2020/03/29/vedio-test/</url>
    <content><![CDATA[<h3 id="vedios-from-Ruiz"><a href="#vedios-from-Ruiz" class="headerlink" title="vedios from Ruiz"></a>vedios from Ruiz</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">&lt;div style&#x3D;&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;</span><br><span class="line">    &lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;46303362&amp;cid&#x3D;81124889&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot; style&#x3D;&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;&gt;</span><br><span class="line">    &lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>




<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=46303362&cid=81124889&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">
    </iframe>
</div>

]]></content>
  </entry>
  <entry>
    <title>Magic Improvement</title>
    <url>/2020/03/26/Ruiz-introduction/</url>
    <content><![CDATA[<p>No man is an island,<br>Entire of itself.<br>Each is a piece of the continent,<br>A part of the main.<br>If a clod be washed away by the sea,<br>Motherland is the less.<br>As well as if a promontory were.<br>As well as if a manner of thine own<br>Or of thine friend’s were.<br>Each man’s death diminishes me,<br>For I am involved in mankind.<br>Therefore, send not to know<br>For whom the bell tolls,<br>It tolls for thee.<br>Mainly by John Donne（1572－1631）</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/26/hello-world/</url>
    <content><![CDATA[<p>Hello everybody, welcome!</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
</search>
